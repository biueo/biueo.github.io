<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Biueo</title>
  
  <subtitle>行到水穷处 坐看云起时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.biueo.com/"/>
  <updated>2019-01-02T15:34:30.647Z</updated>
  <id>http://www.biueo.com/</id>
  
  <author>
    <name>Decai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django之xadmin配置和后台的美化定制</title>
    <link href="http://www.biueo.com/2018/08/01/Django%E4%B9%8Bxadmin%E9%85%8D%E7%BD%AE%E5%92%8C%E5%90%8E%E5%8F%B0%E7%9A%84%E7%BE%8E%E5%8C%96%E5%AE%9A%E5%88%B6/"/>
    <id>http://www.biueo.com/2018/08/01/Django之xadmin配置和后台的美化定制/</id>
    <published>2018-08-01T02:56:41.000Z</published>
    <updated>2019-01-02T15:34:30.647Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>xadmin配置和后台的美化定制</p></blockquote><a id="more"></a><h2 id="xadmin环境的安装"><a href="#xadmin环境的安装" class="headerlink" title="xadmin环境的安装"></a>xadmin环境的安装</h2><p>本文内容的操作环境是Django版本1.9以上，Python2.10。<br>xadmin库的地址在：<a href="https://github.com/sshwsfc/xadmin" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin</a>  ；可以选择下载安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></p><p>也可以选择利用下面的代码进行安装，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+git://github.com/sshwsfc/xadmin.git</span><br></pre></td></tr></table></figure></p><p>但是尽量不要用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xadmin</span><br></pre></td></tr></table></figure></p><p>因为这样安装的xadmin没有此网址提供的xadmin版本新，存在一些问题。<br>安装的时候会顺带将下面这些python库顺带装上。</p><ul><li>django&gt;=1.9.0,&lt;2</li><li>django-crispy-forms&gt;=1.6.0</li><li>django-reversion&gt;=2.0.0</li><li>django-formtools&gt;=1.0</li><li>httplib2==0.9.2</li><li>future</li><li>six<h2 id="用xadmin替换Django自带的admin"><a href="#用xadmin替换Django自带的admin" class="headerlink" title="用xadmin替换Django自带的admin"></a>用xadmin替换Django自带的admin</h2></li></ul><ol><li><p>首先在项目的setting.py文件的INSTALLED_APPS中添加下面的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#'django.contrib.admin', 注释掉此句，避免冲突</span></span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span>,<span class="comment">#原有的应用</span></span><br><span class="line">    <span class="string">'xadmin'</span>,<span class="comment">#需增加的</span></span><br><span class="line">    <span class="string">'crispy_forms'</span>,<span class="comment">#需增加的</span></span><br><span class="line">    <span class="string">'reversion'</span>,<span class="comment">#需增加的</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>修改原有的admin.py文件将其重命名为adminx.py，下面是应用blog下的model.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weiyu</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    abstract=models.CharField(max_length=<span class="number">100</span>) <span class="comment"># 微语摘要</span></span><br><span class="line">    date_time=models.DateTimeField(auto_now_add=<span class="keyword">False</span>) <span class="comment"># 微语日期时间</span></span><br><span class="line">    content=models.TextField(blank=<span class="keyword">True</span>,null=<span class="keyword">True</span>)  <span class="comment">#微语具体内容</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.abstract</span><br></pre></td></tr></table></figure></li></ol><p>修改原有的admin.py文件如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Weiyu</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiyuAdmin</span><span class="params">(object)</span>:</span>   <span class="comment"># 这里用object 替换所有的admin.ModelAdmin</span></span><br><span class="line">    list_display =(<span class="string">'abstract'</span>,<span class="string">'date_time'</span>)</span><br><span class="line">    search_fields = (<span class="string">'abstract'</span>,<span class="string">'date_time'</span>)</span><br><span class="line">xadmin.site.register(Weiyu,WeiyuAdmin) <span class="comment">#原本是admin.site.register(Weiyu,WeiyuAdmin)</span></span><br></pre></td></tr></table></figure></p><ol><li><p>修改主urls.py文件添加下面两个语句即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin<span class="comment"># 放在其他import 文件下面</span></span><br><span class="line">xadmin.autodiscover()</span><br></pre></td></tr></table></figure></li><li><p>最后需要同步一下数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ol><h2 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h2><h3 id="admin的效果"><a href="#admin的效果" class="headerlink" title="admin的效果"></a>admin的效果</h3><ul><li>登录界面</li></ul><p><img src="http://img.biueo.com//17-8-2/3068066.jpg" alt=""></p><ul><li>主页面 </li></ul><p><img src="http://img.biueo.com//17-8-2/85367493.jpg" alt=""></p><h3 id="xadmin的效果"><a href="#xadmin的效果" class="headerlink" title="xadmin的效果"></a>xadmin的效果</h3><ul><li>登录界面</li></ul><p><img src="http://img.biueo.com//17-8-2/45021517.jpg" alt=""></p><ul><li>主页面</li></ul><p><img src="http://img.biueo.com//17-8-2/57294826.jpg" alt=""></p><h2 id="Enjoy-It"><a href="#Enjoy-It" class="headerlink" title="Enjoy It!"></a>Enjoy It!</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;xadmin配置和后台的美化定制&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
      <category term="Django" scheme="http://www.biueo.com/categories/Python/Django/"/>
    
    
      <category term="Django" scheme="http://www.biueo.com/tags/Django/"/>
    
      <category term="xadmin" scheme="http://www.biueo.com/tags/xadmin/"/>
    
  </entry>
  
  <entry>
    <title>数码管数字识别</title>
    <link href="http://www.biueo.com/2018/07/31/%E6%95%B0%E7%A0%81%E7%AE%A1%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://www.biueo.com/2018/07/31/数码管数字识别/</id>
    <published>2018-07-31T02:04:23.000Z</published>
    <updated>2019-01-02T15:34:43.969Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>创建数码管数字识别的数据集，通过卷积神经网络学习，最终实现能够识别图片中数码管数字的功能 </p></blockquote><a id="more"></a><h2 id="简单数据集的创建"><a href="#简单数据集的创建" class="headerlink" title="简单数据集的创建"></a>简单数据集的创建</h2><h3 id="提取数字图片"><a href="#提取数字图片" class="headerlink" title="提取数字图片"></a>提取数字图片</h3><p>数据集的创建主要是通过opencv库的裁剪，以及人工标定的方式去实现。详细如下:  </p><p>安装OpenCV-python库，<code>pip install OpenCV-python</code>   </p><p>然后通过对多张张图片（例如下图）中的数字进行提取：<br><img src="http://img.biueo.com//18-7-31/77966632.jpg" alt=""></p><p>提取数字代码如下：<br><figure class="highlight python"><figcaption><span>提取图片中数字生成统一标准图片</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入相应库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数对图片进行膨胀和腐蚀，不同情况需修改特定参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thresholding_inv</span><span class="params">(image)</span>:</span></span><br><span class="line">    kernel_dilate = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">    <span class="comment">#kernel_erode = cv2.getStructuringElement(cv2.MORPH_RECT,(1, 1))</span></span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    ret, bin = cv2.threshold(gray, <span class="number">220</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    <span class="comment">#bin = cv2.medianBlur(bin, 3)</span></span><br><span class="line">    <span class="comment">#bin = cv2.erode(bin,kernel_erode)</span></span><br><span class="line">    bin=cv2.dilate(bin,kernel_dilate,iterations = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入图片，</span></span><br><span class="line">tt=<span class="number">6</span>  <span class="comment"># 样图序号</span></span><br><span class="line">im = cv2.imread(<span class="string">'./datasets/img0000%s.png'</span> % tt)<span class="comment"># 样图位置，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理图片</span></span><br><span class="line">im_th = thresholding_inv(im)</span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">'%s'</span>%tt ,im_th)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find contours in the image</span></span><br><span class="line">_,ctrs, hier = cv2.findContours(im_th.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get rectangles contains each contour</span></span><br><span class="line">rects = [cv2.boundingRect(ctr) <span class="keyword">for</span> ctr <span class="keyword">in</span> ctrs]</span><br><span class="line">t=tt*<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">    <span class="comment"># Draw the rectangles</span></span><br><span class="line">    cv2.rectangle(im, (rect[<span class="number">0</span>], rect[<span class="number">1</span>]), (rect[<span class="number">0</span>] + rect[<span class="number">2</span>], rect[<span class="number">1</span>] + rect[<span class="number">3</span>]), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>) </span><br><span class="line">    <span class="comment"># Make the rectangular region around the digit</span></span><br><span class="line">    leng1= int(rect[<span class="number">3</span>])</span><br><span class="line">    leng2= int(rect[<span class="number">2</span>])</span><br><span class="line">    pt1 = int(rect[<span class="number">1</span>] )</span><br><span class="line">    pt2 = int(rect[<span class="number">0</span>] )</span><br><span class="line">    roi = im_th[pt1:pt1+leng1, pt2:pt2+leng2]</span><br><span class="line">    <span class="comment"># 生成统一尺寸图片，类似于mnist数据集</span></span><br><span class="line">    roi = cv2.resize(roi, (<span class="number">28</span>, <span class="number">28</span>), interpolation=cv2.INTER_AREA)</span><br><span class="line">    <span class="comment">#roi = cv2.dilate(roi, (3, 3))</span></span><br><span class="line">    cv2.imshow(<span class="string">'roi'</span>,roi)</span><br><span class="line">    cv2.waitKey(<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 保存图片至相应路径</span></span><br><span class="line">    cv2.imwrite(<span class="string">'./datasets/test2/%s.jpg'</span>%t,roi)</span><br><span class="line">    t=t+<span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="手工标定labels"><a href="#手工标定labels" class="headerlink" title="手工标定labels"></a>手工标定labels</h3><p>这一步很简单，直接创建一个txt格式的文件，按照采集的图片顺序，行号对应图片序号进行标定：  </p><p>比如我的：<br><img src="http://img.biueo.com//18-7-31/99441287.jpg" alt=""></p><h3 id="图片和标签对应处理"><a href="#图片和标签对应处理" class="headerlink" title="图片和标签对应处理"></a>图片和标签对应处理</h3><p>将数据集图片和标签进行一一对应，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入数据图片，以features命名</span></span><br><span class="line">imgs=os.listdir(<span class="string">'./datasets/train/imgs/'</span>)</span><br><span class="line"><span class="comment"># 定义一个排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nu_str</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(string.split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 将文件夹中的文件按照名称数字大小进行排序 能够与labels一一对应</span></span><br><span class="line">imgs.sort(key=nu_str)</span><br><span class="line">features_train=[]</span><br><span class="line"><span class="comment"># 对每一张图片进行处理，主要是将矩阵转化为一个向量，最后将所有图片打包</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> imgs:</span><br><span class="line">    img=cv2.imread(<span class="string">'./datasets/train/imgs/'</span>+str(i),<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#res,img=cv2.threshold(img, 200, 255, cv2.THRESH_BINARY)</span></span><br><span class="line">    <span class="comment">#img=cv2.copyMakeBorder(img,5,5,5,5,cv2.BORDER_CONSTANT,value=0)</span></span><br><span class="line">    <span class="comment">#cv2.imshow('3',img)</span></span><br><span class="line">    <span class="comment">#cv2.waitKey(100)</span></span><br><span class="line">    img=img.reshape(<span class="number">28</span>*<span class="number">28</span>)/<span class="number">255</span></span><br><span class="line">    features_train.append(img)</span><br><span class="line">features_train=np.array(features_train) <span class="comment"># 包含所有图片的一个向量集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## labels</span></span><br><span class="line"><span class="comment">## 将每一个图片对应的结果转化为one-hot形式储存## 将每一个 </span></span><br><span class="line"><span class="comment"># 读取文件所有内容</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./datasets/train/targets/target.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    tars=f.readlines()</span><br><span class="line"><span class="comment"># 向量不同位置对应的结果</span></span><br><span class="line">tar_temp=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'.'</span>]</span><br><span class="line">labels_train=[]</span><br><span class="line"><span class="comment"># 构造one-hot形式的向量集</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tars:</span><br><span class="line">    b=np.array([i[<span class="number">0</span>]==str(tar_temp[j]) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(tar_temp))])+<span class="number">0</span></span><br><span class="line">    labels_train.append(b)  <span class="comment"># 一个包含所有结果的向量集（与图片集一一对应）</span></span><br></pre></td></tr></table></figure></p><h2 id="验证数据集是否匹配"><a href="#验证数据集是否匹配" class="headerlink" title="验证数据集是否匹配"></a>验证数据集是否匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据集与结果是否一一对应，主要看看显示的图片和打印的数字是否一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(features_train)):</span><br><span class="line">    cv2.imshow(<span class="string">'feature'</span>,features_train[i].reshape(<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">    print(np.argmax(labels_train[i]))</span><br><span class="line">    cv2.waitKey(<span class="number">500</span>) <span class="comment"># 单张图片的显示时间ms</span></span><br></pre></td></tr></table></figure><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><p>多重卷积模型，参考TensorFlow文档，直接上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义权重函数工厂函数（批量生产权重的函数，为了方便）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape,name)</span>:</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial,name=name)</span><br><span class="line"><span class="comment"># 定义偏置工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape,name)</span>:</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial,name=name)</span><br><span class="line"><span class="comment"># 定义卷积矩阵工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"><span class="comment"># 定义池化层矩阵工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">                        strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 主要有两层卷积运算</span></span><br><span class="line"><span class="comment"># 第一层卷积层定义</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>],name=<span class="string">'w_conv1'</span>)  <span class="comment"># 权重变量</span></span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>],name=<span class="string">'b_conv1'</span>,)            <span class="comment"># 偏置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片输入空间生成,结果空间生成（请求组织先分配好茅坑）</span></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, shape=[<span class="keyword">None</span>, <span class="number">28</span>*<span class="number">28</span>],name=<span class="string">"X"</span>)  <span class="comment"># </span></span><br><span class="line">y_ = tf.placeholder(<span class="string">"float"</span>, shape=[<span class="keyword">None</span>, <span class="number">11</span>],name=<span class="string">"Y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输入空间重新塑造为28*28*1（1指单通道，-1是指可以随机应变），为了后面的卷积运算 因为输入是一个向量集</span></span><br><span class="line">x_image = tf.reshape(x, [<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义卷积矩阵并计算</span></span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class="line"><span class="comment"># 定义池化层 </span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br><span class="line"><span class="comment"># 第二层卷积层定义</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>],name=<span class="string">'w_conv2'</span>)  <span class="comment"># 权重变量</span></span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>],name=<span class="string">'b_conv2'</span>)              <span class="comment"># 偏置</span></span><br><span class="line"></span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过两次卷积和池化，最后的图片只有7*7了，但是还是不知道他到底是什么鬼，所以再来一个权重矩阵，来算算他到底是什么鬼</span></span><br><span class="line"><span class="comment"># 第一个与处理后图片尺寸一样的权重矩阵变量和偏置变量，直接点乘</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>],name=<span class="string">'w_fc1'</span>)  </span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>],name=<span class="string">'b_fc1'</span>)</span><br><span class="line"></span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># keep_prob为了防止过拟合，具体原理我还没看到。。。。</span></span><br><span class="line">keep_prob = tf.placeholder(<span class="string">"float"</span>,name=<span class="string">'keep_prob'</span>)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"><span class="comment"># 再来一个矩阵使得其变成一个全连接层，所谓全连接层就是一个向量，之所以要将矩阵化为全连接层</span></span><br><span class="line"><span class="comment"># 就是为了使得他通过和再一个权重相乘能够得到和结果维度相同的输出</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">11</span>],name=<span class="string">'w_fc2'</span>)</span><br><span class="line">b_fc2 = bias_variable([<span class="number">11</span>],name=<span class="string">'b_fc2'</span>)</span><br><span class="line"><span class="comment"># 最后的结果输出为一个向量 和labels相同的维度，</span></span><br><span class="line">y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class="line"><span class="comment"># 设置模型格式 ，添加输出的格式进去</span></span><br><span class="line">tf.add_to_collection(<span class="string">'yconv'</span>,y_conv)</span><br><span class="line">saver = tf.train.Saver()</span><br></pre></td></tr></table></figure></p><h3 id="训练模型并保存"><a href="#训练模型并保存" class="headerlink" title="训练模型并保存"></a>训练模型并保存</h3><p>简单粗暴 上代码里有注释：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 设置交叉熵为损失函数</span></span><br><span class="line">    cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class="line">    <span class="comment"># 设置优化参数，采用AdamOptimizer优化方法，比最速下降法更优，能够防止过拟合</span></span><br><span class="line">    train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line">    <span class="comment"># 判断预测结果和真实结果是否相同</span></span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y_conv,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 精度</span></span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line">    <span class="comment"># 初始化各个变量</span></span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line">    <span class="comment"># 迭代训练</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">201</span>):</span><br><span class="line">        <span class="comment"># 随机选取数据进行训练</span></span><br><span class="line">        sample = random.sample(range(len(labels_train)),<span class="number">50</span>)</span><br><span class="line">        batch_xs=np.array([features_train[i] <span class="keyword">for</span> i <span class="keyword">in</span> sample])</span><br><span class="line">        batch_ys=np.array([labels_train[i] <span class="keyword">for</span> i <span class="keyword">in</span> sample])</span><br><span class="line">        <span class="comment"># 当是100倍数是保存模型，并且输出当前测试精度，保存路径为相对路径</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            train_accuracy = accuracy.eval(feed_dict=&#123;x:batch_xs, y_: batch_ys, keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"step %d, training accuracy %g"</span>%(i, train_accuracy))</span><br><span class="line">            save_path = saver.save(sess, <span class="string">"./datasets/digit_model/my_digit_model"</span>)</span><br><span class="line">        train_step.run(feed_dict=&#123;x:batch_xs, y_: batch_ys, keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line">    <span class="comment"># 测试整体精度，加载测试集</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"test accuracy %g"</span>%accuracy.eval(feed_dict=&#123;x: features_test, y_: labels_test, keep_prob: <span class="number">1.0</span>&#125;))</span><br></pre></td></tr></table></figure></p><h2 id="模型应用和结果"><a href="#模型应用和结果" class="headerlink" title="模型应用和结果"></a>模型应用和结果</h2><h3 id="调用模型以及可视化显示"><a href="#调用模型以及可视化显示" class="headerlink" title="调用模型以及可视化显示"></a>调用模型以及可视化显示</h3><p>模型训练好可以直接使用此代码进行应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不支持多行数字识别，以及单行多个小数点的数值识别（单行只能实现字符串识别），</span></span><br><span class="line"><span class="comment"># labels的各个位置代表的数字</span></span><br><span class="line">tar_temp=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="string">'.'</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个阈值函数，将数码管部分取出来，根据实际情况进行相应修改，找到最优参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thresholding_inv</span><span class="params">(image)</span>:</span></span><br><span class="line">    <span class="comment"># 定义膨胀核心，根据实际情况进行修改</span></span><br><span class="line">    kernel_dilate = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">1</span>, <span class="number">6</span>))<span class="comment"># 1代表横向膨胀，6代表纵向膨胀</span></span><br><span class="line">    <span class="comment">## 腐蚀参数我已经注释掉，根据实际情况选择是否使用</span></span><br><span class="line">    <span class="comment">#kernel_erode = cv2.getStructuringElement(cv2.MORPH_RECT,(2, 1)) </span></span><br><span class="line">    <span class="comment">## 根据RGB图得到灰度图</span></span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="comment"># 灰度图二值化</span></span><br><span class="line">    ret, bin = cv2.threshold(gray, <span class="number">220</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    <span class="comment">## 对灰度图进行腐蚀，主要是为了分离相近的小数点，如果足够清晰可以不使用腐蚀，我已注释掉</span></span><br><span class="line">    <span class="comment">#bin = cv2.erode(bin,kernel_erode)</span></span><br><span class="line">    <span class="comment">## 对灰度图进行膨胀</span></span><br><span class="line">    bin=cv2.dilate(bin,kernel_dilate,iterations = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read the input image</span></span><br><span class="line"><span class="comment">## demo 图像在此目录下</span></span><br><span class="line">im = cv2.imread(<span class="string">'./datasets/img00004.png'</span>)  <span class="comment"># 还有 1-6 张图 修改最后一个数即可</span></span><br><span class="line"><span class="comment">## 二值化处理</span></span><br><span class="line">im_th = thresholding_inv(im)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line">cv2.imshow(<span class="string">'im_th'</span>,im_th)</span><br><span class="line">cv2.waitKey(<span class="number">1000</span>) <span class="comment"># 显示1000ms </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Find contours in the image  寻找边界集合</span></span><br><span class="line">_,ctrs, hier = cv2.findContours(im_th.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="comment"># Get rectangles contains each contour </span></span><br><span class="line">rects = [cv2.boundingRect(ctr) <span class="keyword">for</span> ctr <span class="keyword">in</span> ctrs]</span><br><span class="line"><span class="comment"># 加载训练好的模型，并预测通过</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 加载模型的结构框架graph</span></span><br><span class="line">    new_saver = tf.train.import_meta_graph(<span class="string">'./datasets/digit_model/my_digit_model.meta'</span>)</span><br><span class="line">    <span class="comment"># 加载各种变量</span></span><br><span class="line">    new_saver.restore(sess,<span class="string">'./datasets/digit_model/my_digit_model'</span>)</span><br><span class="line">    yy_hyp = tf.get_collection(<span class="string">'yconv'</span>)[<span class="number">0</span>]</span><br><span class="line">    graph = tf.get_default_graph() </span><br><span class="line">    X = graph.get_operation_by_name(<span class="string">'X'</span>).outputs[<span class="number">0</span>]<span class="comment">#为了将 x placeholder加载出来</span></span><br><span class="line">    keep_prob = graph.get_operation_by_name(<span class="string">'keep_prob'</span>).outputs[<span class="number">0</span>] <span class="comment"># 将keep_prob placeholder加载出来</span></span><br><span class="line">    <span class="comment"># mm用来保存数字以及数字坐标</span></span><br><span class="line">    mm=&#123;&#125;</span><br><span class="line">    <span class="comment"># for循环对每一个contour 进行预测和求解，并储存</span></span><br><span class="line">    <span class="keyword">for</span> rect <span class="keyword">in</span> rects:</span><br><span class="line">        <span class="comment"># Draw the rectangles 得到数字区域 roi</span></span><br><span class="line">        cv2.rectangle(im, (rect[<span class="number">0</span>], rect[<span class="number">1</span>]), (rect[<span class="number">0</span>] + rect[<span class="number">2</span>], rect[<span class="number">1</span>] + rect[<span class="number">3</span>]), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>) </span><br><span class="line">        <span class="comment"># Make the rectangular region around the digit</span></span><br><span class="line">        leng1= int(rect[<span class="number">3</span>])</span><br><span class="line">        leng2= int(rect[<span class="number">2</span>])</span><br><span class="line">        pt1 = int(rect[<span class="number">1</span>] )</span><br><span class="line">        pt2 = int(rect[<span class="number">0</span>] )</span><br><span class="line">        <span class="comment"># 得到数字区域</span></span><br><span class="line">        roi = im_th[pt1:pt1+leng1, pt2:pt2+leng2]</span><br><span class="line">        <span class="comment"># 尺寸缩放为模型尺寸</span></span><br><span class="line">        roi = cv2.resize(roi, (<span class="number">28</span>, <span class="number">28</span>), interpolation=cv2.INTER_AREA)</span><br><span class="line">        <span class="comment"># 处理成一个向量，为了和模型输入一直</span></span><br><span class="line">        roi=np.array([roi.reshape(<span class="number">28</span>*<span class="number">28</span>)/<span class="number">255</span>])</span><br><span class="line">        <span class="comment"># 运行模型得到预测结果</span></span><br><span class="line">        pred= sess.run(yy_hyp,feed_dict = &#123;X:roi,keep_prob:<span class="number">1.0</span>&#125;)</span><br><span class="line">        <span class="comment"># 得到最大可能值索引 ind</span></span><br><span class="line">        ind=np.argmax(pred)</span><br><span class="line">        <span class="comment">#labels不同位置代表的不同数字   (tar_temp[ind]) 就是预测值</span></span><br><span class="line">        <span class="comment"># 将预测值添加到图像中，并显示</span></span><br><span class="line">        cv2.putText(im, str(tar_temp[ind]), (rect[<span class="number">0</span>], rect[<span class="number">1</span>]),cv2.FONT_HERSHEY_DUPLEX, <span class="number">2</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 储存每个数字和其对应的boundingbox的像素点坐标</span></span><br><span class="line">        mm[pt2]=tar_temp[ind]</span><br><span class="line">    <span class="comment"># 最后的处理</span></span><br><span class="line">    <span class="comment"># 根据像素坐标，从左到右排序，得到数字的顺序</span></span><br><span class="line">    num_tup=sorted(mm.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 将数字列表连接为字符串</span></span><br><span class="line">    num=(<span class="string">''</span>.join([str(i[<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> num_tup]))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        numn=float(num)</span><br><span class="line">        print(<span class="string">'图中数字为%s,数值大小为%s'</span> %(num,numn))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'不好意思，目前不支持多个小数点的数值识别'</span>)</span><br><span class="line">        print(<span class="string">'图中数字为%s'</span>% num)</span><br><span class="line">    <span class="comment"># 显示图像 </span></span><br><span class="line">    cv2.namedWindow(<span class="string">"Resulting Image with Rectangular ROIs"</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">    cv2.imshow(<span class="string">"Resulting Image with Rectangular ROIs"</span>, im)</span><br><span class="line">    cv2.waitKey(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>输出结果如下图所示：<br><img src="http://img.biueo.com//18-7-31/1618438.jpg" alt=""></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/biueo/tube_digit_recognization" target="_blank" rel="noopener">https://github.com/biueo/tube_digit_recognization</a><br>欢迎star</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;创建数码管数字识别的数据集，通过卷积神经网络学习，最终实现能够识别图片中数码管数字的功能 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
      <category term="TensorFlow" scheme="http://www.biueo.com/categories/Python/TensorFlow/"/>
    
    
      <category term="Python" scheme="http://www.biueo.com/tags/Python/"/>
    
      <category term="TensorFlow" scheme="http://www.biueo.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Vi最常用到的几个命令</title>
    <link href="http://www.biueo.com/2018/07/12/Vi%E6%9C%80%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.biueo.com/2018/07/12/Vi最常用到的几个命令/</id>
    <published>2018-07-12T02:42:14.000Z</published>
    <updated>2019-01-02T15:34:40.161Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>最常用的VI指令分类 </p></blockquote><a id="more"></a><p>先上一张vi指令的键盘图：<br><img src="http://img.biueo.com//18-7-12/53905799.jpg" alt="">  </p><h2 id="最常用指令集五颗星"><a href="#最常用指令集五颗星" class="headerlink" title="最常用指令集五颗星"></a>最常用指令集五颗星</h2><ul><li>命令功能<br>输入法切换到英文输入方可:<br>i 在当前光标处进入插入状态，插入到光标之前<br>a 在当前光标后进入插入状态，插入到光标之后<br>A 将光标移动到当前行的行末，并进入插入状态<br>o 在当前行的下面插入新行，将光标移动到新行的行首，进入插入状态<br>O 在当前行上面插入新航，将光标移动到新行的行首，进入插入状态</li><li>编辑功能<br>ZZ 命令模式下保存当前文件所做的修改后退出vi<br>:wq 在命令模式下，执行存盘退出操作<br>:w 在命令模式下，执行存盘操作<br>:w! 在命令模式下，执行强制存盘操作<br>:q 在命令模式下，执行退出vi操作<br>:q! 在命令模式下，执行强制退出vi操作<br>u 撤销最近一次操作，并恢复操作结果，可以多次使用进行多步操作<br>U 取消对当前行进行的所有操作<br>ctrl+r 对使用u命令撤销的操作进行恢复 </li><li>复制粘贴<br>yy 复制当前行整行的内容到vi缓冲区<br>yw 复制当前光标到单词尾字符的内容到vi缓冲区<br>y$ 复制当前光标到行尾的内容到vi缓冲区<br>y^ 复制当前光标到行首的内容到vi缓冲区  </li><li>删除操作<br>dd 删除当前光标所在行<br>x 删除光标处的单个字符，连续使用向后删除<br>dw 删除当前字符到单词尾包括空格的所有字符<br>de 删除当前字符到单词尾不包括空格的所有字符<br>d$ 删除当前字符到行尾的所有字符<br>d^ 删除当前字符到行首的所有字符<br>J 删除光标所在行行尾的换行符，相当于合并当前行和下一行内容  <h2 id="最常用vi指令四颗星"><a href="#最常用vi指令四颗星" class="headerlink" title="最常用vi指令四颗星"></a>最常用vi指令四颗星</h2></li><li>搜索功能<br>/word 从上而下搜索文件中查找字符串“word”<br>?word 从下而上在文件中查找字符串“word”<br>n 定位下一个匹配的被查找的字符串<br>N 定位上一个匹配的字符串 </li><li>替换功能<br>:s/old/new 将当前行中查找到的第一个字符串“old”替换为“new”<br>:s/old/new/g 将当前行中查找到的所有字符串替换为“new”<br>:#,#s/old/new/g 在行号“#，#”范围内替换所有的字符串“old”为“new”<br>:%s/old/new/g 在整个文件范围内替换所有的字符串“old”为“new”<br>:s/old/new/c 在替换命令末尾加入c命令，将对每个替换动作提示用户进行确认  </li><li>跳转命令<br>Ctrl+u：向文件首翻半屏;<br>Ctrl+d：向文件尾翻半屏;<br>Ctrl+f：向文件尾翻一屏;<br>Ctrl+b：向文件首翻一屏;<br>e或者E 跳转至下个单词行尾<br>b或者B 跳转至上个单词行首<br>0数字0 光标移至当前行首<br>$ 光标移至当前行末<br>H 光标移至屏幕顶行<br>M 光标移至屏幕中间行<br>L 光标移至屏幕最后行<br>G 光标移至最后一行<br>nG 光标移至第n行首<br>n+ 光标下移n行<br>n- 光标上移n行   </li><li>辅助命令<br>:set nu 显示行号<br>:set nonu 不显示行号</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最常用的VI指令分类 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.biueo.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://www.biueo.com/tags/Linux/"/>
    
      <category term="Vi" scheme="http://www.biueo.com/tags/Vi/"/>
    
  </entry>
  
  <entry>
    <title>光纤中的模式</title>
    <link href="http://www.biueo.com/2018/05/27/%E5%85%89%E7%BA%A4%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.biueo.com/2018/05/27/光纤中的模式/</id>
    <published>2018-05-27T09:57:16.000Z</published>
    <updated>2019-01-02T15:34:42.291Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>光纤中的模式及其兼并度</p></blockquote><a id="more"></a><p>首先看下图所示，有一个直观了解<br><img src="http://img.biueo.com//18-5-27/73422603.jpg" alt=""><br>接着：<br><img src="http://img.biueo.com//18-5-27/70179549.jpg" alt=""><br>对于不同的m值（圆周方向电场变化的周期数）会有下面的关系：<br><img src="http://img.biueo.com//18-5-27/25742261.jpg" alt=""><br>所以当m值确定时，U的值有很多种情况，（具体和光纤的半径和波长有关系），<br><img src="http://img.biueo.com//18-5-27/83912009.jpg" alt=""><br>也能够求出光纤中能够传播的模式数量：  </p><script type="math/tex; mode=display">M \approx { {1\over 2} {\left({ {2\pi a} \over {\lambda} }\right)^2 {\left({ n_1^2 - n_2^2 } \right)} = { {V^2} \over {2}} }}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;光纤中的模式及其兼并度&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="老本行" scheme="http://www.biueo.com/categories/%E8%80%81%E6%9C%AC%E8%A1%8C/"/>
    
    
      <category term="激光" scheme="http://www.biueo.com/tags/%E6%BF%80%E5%85%89/"/>
    
  </entry>
  
  <entry>
    <title>清明游记</title>
    <link href="http://www.biueo.com/2018/04/07/%E6%B8%85%E6%98%8E%E6%B8%B8%E8%AE%B0/"/>
    <id>http://www.biueo.com/2018/04/07/清明游记/</id>
    <published>2018-04-07T10:44:17.000Z</published>
    <updated>2019-01-02T15:34:45.461Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>清明节游记</p></blockquote><a id="more"></a><p>充实的一个清明节，和小胖先后去了三里屯，蓝色港湾，朝阳公园，西单商场。玩了笑傲江湖密室，迷你过山车，照了不错的夜景照片，抓了几个小娃娃，开心充实。<br>附上几张照片。<br><img src="http://img.biueo.com//18-4-7/83310761.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/41413618.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/2721867.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/89810046.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/82606051.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/48227795.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/63025922.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/70114211.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/82044873.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/50989444.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/39885872.jpg" alt=""><br><img src="http://img.biueo.com//18-4-7/51441112.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;清明节游记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="游记" scheme="http://www.biueo.com/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="游记" scheme="http://www.biueo.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="照片" scheme="http://www.biueo.com/tags/%E7%85%A7%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>递归和迭代</title>
    <link href="http://www.biueo.com/2018/04/04/%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3/"/>
    <id>http://www.biueo.com/2018/04/04/递归和迭代/</id>
    <published>2018-04-04T12:07:12.000Z</published>
    <updated>2019-01-02T15:34:24.030Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>迭代和递归的区别</p></blockquote><a id="more"></a><p>如果说一个过程不调用其他过程，我们称之为叶过程，如果一个程序所有过程都是叶过程，那么整个程序应该很容易理解，但是实际上很多过程会调用其他过程，甚至是调用本身。</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。实现递归理想的数据结构是栈，栈是一种后进先出的队列，它需要一个指针用来指向最新分配的地址，以指示下一个过程放置寄存器的位置，我们称之为栈指针。数据放入为压栈，移除为出栈。<br>以一个例子进行说明：  </p><p>计算阶乘的递归过程<br><figure class="highlight c"><figcaption><span>阶乘程序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>)<span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (n*fact(n<span class="number">-1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>汇编语言：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">fact:</span> </span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">8</span> <span class="comment"># adjust stack for 2 items</span></span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">ra</span>,<span class="number">4</span>($<span class="built_in">sp</span>) <span class="comment"># save the return address</span></span><br><span class="line">    <span class="keyword">sw </span>$<span class="built_in">a0</span>,<span class="number">0</span>($<span class="built_in">sp</span>) <span class="comment"># save the argument n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">slti </span>$<span class="built_in">t0</span>,$<span class="built_in">a0</span>,<span class="number">1</span>   <span class="comment"># test for n&lt;1</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span>,L1 <span class="comment"># if n&gt;=1,go to L1</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">v0</span>,$<span class="built_in">zero</span>,<span class="number">1</span> <span class="comment">#return 1</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">8</span>   <span class="comment"># pop 2 items off stack</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span>   <span class="comment"># return to caller</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">L1:</span>  <span class="keyword">addi </span>$<span class="built_in">a0</span>,$<span class="built_in">a0</span>,-<span class="number">1</span> <span class="comment"># n&gt;=1:argument gets(n-1)</span></span><br><span class="line">    <span class="keyword">jar </span>fact</span><br><span class="line"></span><br><span class="line"><span class="keyword">lw </span> $<span class="built_in">a0</span>,<span class="number">0</span>($<span class="built_in">sp</span>)  <span class="comment"># return from jal:restore argument n</span></span><br><span class="line"><span class="keyword">lw </span> $<span class="built_in">ra</span>,<span class="number">4</span>($<span class="built_in">sp</span>)  <span class="comment"># restore the return address</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">sp</span>,$<span class="built_in">sp</span>,<span class="number">8</span>  <span class="comment"># adjust stack pointer to pop items</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mul </span>$<span class="built_in">v0</span>,$<span class="built_in">a0</span>,$<span class="built_in">v0</span>  <span class="comment">#return n*fact(n-1)</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br></pre></td></tr></table></figure></p><p>用fact(3)进行演示<br><img src="http://img.biueo.com//18-4-4/56294686.jpg" alt=""></p><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><blockquote class="blockquote-center"><p>迭代是重复反馈过程的活动，其目的通常是为了接近并到达所需的目标或结果。每一次对过程的重复被称为一次“迭代”，而每一次迭代得到的结果会被用来作为下一次迭代的初始值<br>————WiKipedia</p></blockquote><p><img src="http://img.biueo.com//18-4-4/16425464.jpg" alt=""><br>举个栗子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span> <span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> acc)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> sum(n<span class="number">-1</span>,acc+n);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应的汇编语言<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sum:</span> <span class="keyword">slti </span>$<span class="built_in">t0</span>,$<span class="built_in">a0</span>,<span class="number">1</span>  <span class="comment"># test if n&lt;=0</span></span><br><span class="line">    <span class="keyword">bne </span>$<span class="built_in">t0</span>,$<span class="built_in">zero</span>,sum_exit <span class="comment"># go to sum_exit if n&lt;=0</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">a1</span>,$<span class="built_in">a1</span>,<span class="built_in">a0</span> <span class="comment"># add n to acc</span></span><br><span class="line">    <span class="keyword">addi </span>$<span class="built_in">a0</span>,$<span class="built_in">a0</span>,-<span class="number">1</span> <span class="comment"># subtract 1 from n</span></span><br><span class="line">    <span class="keyword">j </span>sum  <span class="comment"># go to sum</span></span><br><span class="line"><span class="symbol">sum_exit:</span></span><br><span class="line">    <span class="keyword">add </span>$<span class="built_in">v0</span>,$<span class="built_in">a1</span>,<span class="built_in">zero</span> <span class="comment"># return value acc</span></span><br><span class="line">    <span class="keyword">jr </span>$<span class="built_in">ra</span> <span class="comment">#return to caller</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;迭代和递归的区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机" scheme="http://www.biueo.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="递归" scheme="http://www.biueo.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="计算机" scheme="http://www.biueo.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>python基础数据绘图</title>
    <link href="http://www.biueo.com/2018/03/08/python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%98%E5%9B%BE/"/>
    <id>http://www.biueo.com/2018/03/08/python基础数据绘图/</id>
    <published>2018-03-08T12:30:11.000Z</published>
    <updated>2019-01-02T15:34:37.671Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>基于matplotlib的数据绘图，基础部分</p></blockquote><a id="more"></a><h2 id="常用基础绘图"><a href="#常用基础绘图" class="headerlink" title="常用基础绘图"></a>常用基础绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rc(<span class="string">'lines'</span>,lw=<span class="number">2</span>) <span class="comment"># 设定全局线的宽度</span></span><br><span class="line">plt.rc(<span class="string">'font'</span>,family=<span class="string">'Microsoft YaHei'</span>,size=<span class="number">24</span>) <span class="comment">#设置全局的字体大小</span></span><br><span class="line"><span class="comment">#基本操作</span></span><br><span class="line">x=np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>)</span><br><span class="line">y=np.sin(x)</span><br><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">10</span>,<span class="number">8</span>))</span><br><span class="line">plt.plot(x,y,<span class="string">'k-'</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">2</span>*np.pi)</span><br><span class="line">plt.ylim(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x轴'</span>,fontsize=<span class="number">26</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y轴'</span>,fontsize=<span class="number">26</span>)</span><br><span class="line">plt.title(<span class="string">'常用基础绘图'</span>)</span><br><span class="line">plt.grid(<span class="string">'true'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/35087977.jpg" alt=""></p><h3 id="绘图函数介绍"><a href="#绘图函数介绍" class="headerlink" title="绘图函数介绍"></a>绘图函数介绍</h3><p>1.函数：<strong>plt.figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.figure'="">, clear=False, **kwargs)</class></strong>  </p><p><strong>关键参数介绍：</strong>  </p><ul><li><p><strong>num</strong> : integer or string, optional, default: none<br>  If not provided, a new figure will be created, and the figure number<br>  will be incremented. The figure objects holds this number in a <code>number</code><br>  attribute.<br>  If num is provided, and a figure with this id already exists, make<br>  it active, and returns a reference to it. If this figure does not<br>  exists, create it and returns it.<br>  If num is a string, the window title will be set to this figure’s<br>  <code>num</code>.</p></li><li><p><strong>figsize</strong> : tuple of integers, optional, default: None<br>  width, height in inches. If not provided, defaults to rc<br>  figure.figsize.</p></li><li><p><strong>dpi</strong> : integer, optional, default: None<br>  resolution of the figure. If not provided, defaults to rc figure.dpi.</p></li><li><p><strong>facecolor</strong> :<br>  the background color. If not provided, defaults to rc figure.facecolor.</p></li><li><p><strong>edgecolor</strong> :<br>  the border color. If not provided, defaults to rc figure.edgecolor.  </p></li><li><p><strong>frameon</strong> : bool, optional, default: True<br>  If False, suppress drawing the figure frame.  </p></li><li><p><strong>FigureClass</strong> : class derived from matplotlib.figure.Figure<br>  Optionally use a custom Figure instance.  </p></li><li><p><strong>clear</strong> : bool, optional, default: False<br>  If True and the figure already exists, then it is cleared.  </p></li></ul><p><strong>返回类型：</strong>  </p><p>figure : Figure<br>    The Figure instance returned will also be passed to new_figure_manager<br>    in the backends, which allows to hook custom Figure classes into the<br>    pylab interface. Additional kwargs will be passed to the figure init<br>    function.  </p><p><strong>注释：</strong>   </p><p>If you are creating many figures, make sure you explicitly call “close”<br>on the figures you are not using, because this will enable pylab<br>to properly clean up the memory.</p><h2 id="设置坐标轴进阶"><a href="#设置坐标轴进阶" class="headerlink" title="设置坐标轴进阶"></a>设置坐标轴进阶</h2><h3 id="设置坐标轴坐标"><a href="#设置坐标轴坐标" class="headerlink" title="设置坐标轴坐标"></a>设置坐标轴坐标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(x,y,color=<span class="string">'red'</span>,linewidth=<span class="number">1.5</span>,linestyle=<span class="string">'--'</span>)  <span class="comment"># 绘图</span></span><br><span class="line">plt.xlabel(<span class="string">'x轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y轴'</span>)</span><br><span class="line">plt.xlim((<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line">plt.ylim((<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line">newticks=np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">11</span>)   <span class="comment"># 设置坐标</span></span><br><span class="line">plt.xticks(newticks) <span class="comment"># 标注横坐标</span></span><br><span class="line">plt.yticks([<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="string">'max'</span>,<span class="string">'$\\frac&#123;\sqrt&#123;2&#125;&#125;&#123;2&#125;\cdot 0$'</span>,<span class="string">'min'</span>]) <span class="comment"># 标注横坐标 可以使用mathjax公式</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/74862243.jpg" alt=""></p><h3 id="移动隐藏坐标轴"><a href="#移动隐藏坐标轴" class="headerlink" title="移动隐藏坐标轴"></a>移动隐藏坐标轴</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(x,y,color=<span class="string">'red'</span>,linewidth=<span class="number">3.5</span>,linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'$x$'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'$y=sin(x)$'</span>)</span><br><span class="line">ax=plt.gca()         <span class="comment">#获得图像的参数</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>) <span class="comment"># 隐藏右坐标轴</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)   <span class="comment"># 隐藏上坐标轴</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)<span class="comment"># 设置x坐标的位于坐标轴的位置</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>)) <span class="comment"># data 可以换成outward、axes 移动到y轴data为0的位置</span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)  <span class="comment"># 设置y坐标的位于坐标轴的位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>)) <span class="comment"># data 表示将x轴移动到数据位置0处</span></span><br><span class="line">ax.yaxis.set_tick_params(width=<span class="number">3</span>,length=<span class="number">5</span>)<span class="comment"># 设置y坐标轴刻度线尺寸</span></span><br><span class="line">ax.xaxis.set_tick_params(width=<span class="number">3</span>,length=<span class="number">5</span>)<span class="comment"># 设置x坐标轴刻度线尺寸</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_lw(<span class="number">3</span>)  <span class="comment">#设置y坐标轴的线的宽度</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_lw(<span class="number">3</span>)<span class="comment">#设置x坐标轴的线的宽度</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment"># ax.spines['left'].set_sketch_params(scale=1.1,length=none) #手绘风格坐标轴</span></span><br><span class="line"><span class="comment">#help(ax.xaxis) 查看帮助</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/34615928.jpg" alt=""></p><h2 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">x=np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>)</span><br><span class="line">y1=np.sin(x)</span><br><span class="line">y2=np.cos(x)</span><br><span class="line">plt.figure(<span class="number">3</span>,figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">l1,=plt.plot(x,y1,<span class="string">'r--'</span>,label=<span class="string">'$sin(x)$'</span>) <span class="comment">#注意逗号</span></span><br><span class="line">l2,=plt.plot(x,y2,<span class="string">'b'</span>,label=<span class="string">'$cos(x)$'</span>)<span class="comment">#注意逗号</span></span><br><span class="line"><span class="comment"># plt.xlim()</span></span><br><span class="line">plt.xlim((<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line">plt.ylim((<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line"><span class="comment">#plt.xticks()</span></span><br><span class="line">xticks=np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">plt.xticks(xticks)</span><br><span class="line">yrange=np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">yticks=list(yrange)</span><br><span class="line">yticks[<span class="number">0</span>]=<span class="string">'$min$'</span></span><br><span class="line">yticks[<span class="number">2</span>]=<span class="string">'$zero$'</span></span><br><span class="line">yticks[<span class="number">4</span>]=<span class="string">'$max$'</span></span><br><span class="line">plt.yticks(yrange,yticks)</span><br><span class="line"><span class="comment">#plt.ax</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.yaxis.set_tick_params(width=<span class="number">3</span>,length=<span class="number">5</span>)<span class="comment"># 设置y坐标轴刻度线尺寸</span></span><br><span class="line">ax.xaxis.set_tick_params(width=<span class="number">3</span>,length=<span class="number">5</span>)<span class="comment"># 设置x坐标轴刻度线尺寸</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_lw(<span class="number">2</span>)  <span class="comment">#设置y坐标轴的线的宽度</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_lw(<span class="number">2</span>)<span class="comment">#设置x坐标轴的线的宽度</span></span><br><span class="line"><span class="comment"># 图例</span></span><br><span class="line">plt.legend(handles=[l1,l2],labels=[<span class="string">'$sin(x)$'</span>,<span class="string">'$cos(x)$'</span>],loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment">#  'best' : 0,          </span></span><br><span class="line"><span class="comment">#  'upper right'  : 1,</span></span><br><span class="line"><span class="comment">#  'upper left'   : 2,</span></span><br><span class="line"><span class="comment">#  'lower left'   : 3,</span></span><br><span class="line"><span class="comment">#  'lower right'  : 4,</span></span><br><span class="line"><span class="comment">#  'right'        : 5,</span></span><br><span class="line"><span class="comment">#  'center left'  : 6,</span></span><br><span class="line"><span class="comment">#  'center right' : 7,</span></span><br><span class="line"><span class="comment">#  'lower center' : 8,</span></span><br><span class="line"><span class="comment">#  'upper center' : 9,</span></span><br><span class="line"><span class="comment">#  'center'       : 10,</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/12267622.jpg" alt=""></p><h2 id="添加标注"><a href="#添加标注" class="headerlink" title="添加标注"></a>添加标注</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">x=np.linspace(<span class="number">-5</span>,<span class="number">5</span>,<span class="number">11</span>)   </span><br><span class="line">y=x</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(x,y,<span class="string">'b-'</span>)</span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>,<span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_tick_params(width=<span class="number">3</span>,length=<span class="number">5</span>)<span class="comment"># 设置y坐标轴刻度线尺寸</span></span><br><span class="line">ax.xaxis.set_tick_params(width=<span class="number">3</span>,length=<span class="number">5</span>)<span class="comment"># 设置x坐标轴刻度线尺寸</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_lw(<span class="number">3</span>)  <span class="comment">#设置y坐标轴的线的宽度</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_lw(<span class="number">3</span>)<span class="comment">#设置x坐标轴的线的宽度</span></span><br><span class="line">plt.plot([<span class="number">3</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">3</span>],<span class="string">'k--'</span>,linewidth=<span class="number">2</span>)</span><br><span class="line">plt.scatter([<span class="number">3</span>,],[<span class="number">3</span>,],s=<span class="number">50</span>,color=<span class="string">'b'</span>)</span><br><span class="line">plt.annotate(<span class="string">r'$y=x=3$'</span>,xy=[<span class="number">3</span>,<span class="number">3</span>],xycoords=<span class="string">'data'</span>,xytext=(+<span class="number">40</span>,<span class="number">-40</span>),textcoords=<span class="string">'offset points'</span>,fontsize=<span class="number">24</span>,</span><br><span class="line">            arrowprops=dict(width=<span class="number">2</span>, connectionstyle=<span class="string">"arc3,rad=.3"</span>))</span><br><span class="line">plt.text(<span class="number">1.5</span>,<span class="number">3</span>,<span class="string">'$y=x$'</span>,fontdict=&#123;<span class="string">'size'</span>: <span class="number">16</span>, <span class="string">'color'</span>: <span class="string">'r'</span> &#125;)</span><br><span class="line"><span class="comment"># help(plt.annotate) 查看帮助</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/30046135.jpg" alt=""></p><h2 id="绘制多图"><a href="#绘制多图" class="headerlink" title="绘制多图"></a>绘制多图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">wave=pd.read_csv(<span class="string">'/Users/ddc/Desktop/1.CSV'</span>,names=[<span class="string">'wavelength'</span>,<span class="string">'power'</span>],skiprows=<span class="number">34</span>)</span><br><span class="line">x=wave[<span class="string">'wavelength'</span>]</span><br><span class="line">y=wave[<span class="string">'power'</span>]/<span class="number">-1</span>*max(wave[<span class="string">'power'</span>])</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>))</span><br><span class="line">ax1=plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>),(<span class="number">0</span>,<span class="number">0</span>),rowspan=<span class="number">2</span>,colspan=<span class="number">2</span>)</span><br><span class="line">ax1.plot(x,y)</span><br><span class="line">ax1.set_xticks([])</span><br><span class="line">ax1.set_title(<span class="string">'small figure1'</span>)</span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line">ax2.plot(x,y)</span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">2</span>), rowspan=<span class="number">2</span>)</span><br><span class="line">ax3.plot(x,y)</span><br><span class="line">ax3.set_xlim((<span class="number">1010</span>,<span class="number">1050</span>))</span><br><span class="line">ax3.set_xticks([])</span><br><span class="line">ax3.set_yticks([])</span><br><span class="line">ax4 = plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">ax4.plot(x,y)</span><br><span class="line">ax4.set_xlim((<span class="number">1010</span>,<span class="number">1050</span>))</span><br><span class="line">ax4.set_yticks([])</span><br><span class="line"><span class="comment"># ax4ax=plt.gca()</span></span><br><span class="line"><span class="comment"># ax4ax.spines['right'].set_color('none')</span></span><br><span class="line">plt.suptitle(<span class="string">'total'</span>)  <span class="comment"># 总标题</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/6127483.jpg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(figure,((ax11, ax12), (ax13, ax14)))=plt.subplots(<span class="number">2</span>, <span class="number">2</span>, sharex=<span class="keyword">True</span>, sharey=<span class="keyword">True</span>)</span><br><span class="line">ax11.plot(x,y)</span><br><span class="line">ax12.plot(x,y)</span><br><span class="line">ax13.plot(x,y)</span><br><span class="line">ax14.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/45547796.jpg" alt=""></p><h2 id="图中图绘制"><a href="#图中图绘制" class="headerlink" title="图中图绘制"></a>图中图绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pyplot模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化figure</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">left, bottom, width, height = <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]</span><br><span class="line">ax1 = fig.add_axes([left, bottom, width, height])</span><br><span class="line">ax1.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax1.set_title(<span class="string">'title'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#小图1</span></span><br><span class="line"></span><br><span class="line">left, bottom, width, height = <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">0.25</span>, <span class="number">0.25</span></span><br><span class="line">ax2 = fig.add_axes([left, bottom, width, height])</span><br><span class="line">ax2.plot(y, x, <span class="string">'b'</span>)</span><br><span class="line">ax2.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax2.set_title(<span class="string">'title inside 1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#小图2</span></span><br><span class="line">plt.axes([<span class="number">0.6</span>, <span class="number">0.2</span>, <span class="number">0.25</span>, <span class="number">0.25</span>])</span><br><span class="line">plt.plot(y[::<span class="number">-1</span>], x, <span class="string">'g'</span>) <span class="comment"># 注意对y进行了逆序处理</span></span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.title(<span class="string">'title inside 2'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/80539730.jpg" alt=""></p><h2 id="次坐标轴"><a href="#次坐标轴" class="headerlink" title="次坐标轴"></a>次坐标轴</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">y1 = <span class="number">0.05</span> * x**<span class="number">2</span></span><br><span class="line">y2 = np.sin(x)</span><br><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line">plt.yticks(color=<span class="string">'g'</span>)</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">ax1.plot(x, y1, <span class="string">'g-'</span>)   <span class="comment"># green, solid line</span></span><br><span class="line">ax11=plt.gca()</span><br><span class="line">ax11.spines[<span class="string">'left'</span>].set_color(<span class="string">'green'</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">'X data'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'Y1 data'</span>, color=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">ax2.plot(x, y2, <span class="string">'b-'</span>) <span class="comment"># blue</span></span><br><span class="line">plt.yticks(color=<span class="string">'b'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'Y2 data'</span>, color=<span class="string">'b'</span>)</span><br><span class="line">ax11=plt.gca()</span><br><span class="line">ax11.spines[<span class="string">'right'</span>].set_color(<span class="string">'b'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://img.biueo.com//18-3-8/69556489.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;基于matplotlib的数据绘图，基础部分&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.biueo.com/tags/Python/"/>
    
      <category term="绘图" scheme="http://www.biueo.com/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>儿时</title>
    <link href="http://www.biueo.com/2018/03/06/%E5%84%BF%E6%97%B6/"/>
    <id>http://www.biueo.com/2018/03/06/儿时/</id>
    <published>2018-03-05T19:36:27.000Z</published>
    <updated>2019-01-02T15:34:41.742Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>我们就天天长大~</p></blockquote><a id="more"></a><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=407761576&auto=1&height=32"></iframe><br><blockquote class="blockquote-center"><p>我们就一天天长大。<br>今年二十又四，就步入中年人的行列，<br>本以为这种歌，早唤不起自己日渐麻木的心灵。<br>也不知是深夜的原故，还是残存的感性。<br>听到这首儿时还是被感动的一塌糊涂。<br>童年的种种更像电影般，一幕幕的涌现脑海中。<br>令我，<br>想起了那走过一次次的土泥路，<br>想起了那呆过一天天的老教室，<br>想起了那唱过一遍遍的流行歌；<br>想起了那晚风习习的夏夜，<br>想起了那寒风瑟瑟的冬天，<br>想起了那摸鱼儿的日子，<br>想起了那打雪仗的时光；<br>想起了那弹不完的弹珠，<br>想起了那丢不尽的沙包，<br>想起了那跳不累的皮筋，<br>想起了那玩不腻的小霸王；<br>“日子总是慢的不像话”。<br>想起了那上下课的铃铛声，<br>想起了那抄题成瘾的老师，<br>想起了那一直有聊的同桌；<br>想起了那破烂的新词典，<br>想起了那卯足勇气递出的纸条，<br>想起了曾经喜欢的她。<br>“我们就一天天长大”。<br>想起了那张面孔稚嫩的毕业照，<br>想起了那本字迹褪色的笔记簿，<br>想起了那些日渐走散的发小们，<br>想起了那个后来失去音讯的她，<br>想起了这就是一去不返我的童年啊！</p></blockquote></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;我们就天天长大~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="文字" scheme="http://www.biueo.com/categories/%E6%96%87%E5%AD%97/"/>
    
    
      <category term="瞎写一通" scheme="http://www.biueo.com/tags/%E7%9E%8E%E5%86%99%E4%B8%80%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>一些古诗词</title>
    <link href="http://www.biueo.com/2018/02/17/%E4%B8%80%E4%BA%9B%E5%8F%A4%E8%AF%97/"/>
    <id>http://www.biueo.com/2018/02/17/一些古诗/</id>
    <published>2018-02-17T13:52:50.000Z</published>
    <updated>2019-01-02T15:34:41.207Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><center><strong>诗词几首</strong></center><a id="more"></a><p><blockquote class="blockquote-center"><p><strong>终南别业</strong><br><em>——王维</em></p><p>中岁颇好道，晚家南山陲。<br>兴来每独往，胜事空自知。<br>行到水穷处，坐看云起时。<br>偶然值林叟，谈笑无还期。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>杳杳寒山道</strong><br><em>——寒山</em><br>杳杳寒山道，落落冷涧滨。<br>啾啾常有鸟，寂寂更无人。<br>淅淅风吹面，纷纷雪积身。<br>朝朝不见日，岁岁不知春。</p></blockquote>&emsp;</p><p><blockquote class="blockquote-center"><p><strong>入朝洛堤步月</strong><br><em>——上官仪</em><br>脉脉广川流，驱马历长洲。<br>鹊飞山月曙，蝉噪野风秋。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>白头吟</strong><br><em>——卓文君</em><br>凄凄复凄凄，嫁娶不须啼。<br>愿得一人心，白头不相离。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>咏风</strong><br><em>——王勃</em><br>肃肃凉风生，加我林壑清。<br>驱烟寻涧户，卷雾出山楹。<br>去来固无迹，动息如有情。<br>日落山水静，为君起松声。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>从军行</strong><br><em>——杨炯</em><br>烽火照西京，心中自不平。<br>牙璋辞凤阙，铁骑绕龙城。<br>雪暗凋旗画，风多杂鼓声。<br>宁为百夫长，胜作一书生。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>送别杜审言</strong><br><em>——宋之问</em><br>卧病人事绝，嗟君万里行。<br>河桥不想送，江树远含情。<br>别路追孙楚，维舟吊屈平。<br>可惜龙泉剑，流落在丰城。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>渡汉江</strong><br><em>——宋之问</em><br>岭外音书断，经冬复历春。<br>近乡情更怯，不敢问来人。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>登幽州台歌</strong><br><em>——陈子昂</em><br>前不见古人，后不见来者。<br>念天地之悠悠，独怆然而涕下。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>春江花月夜</strong><br><em>——张若虚</em><br>春江潮水连海平，海上明月共潮生。<br>滟滟随波千万里，何处春江无月明。<br>江流宛转绕芳甸，月照花林皆似霰。<br>空里流霜不觉飞，汀上白沙看不见。<br>江天一色无纤尘，皎皎空中孤月轮。<br>江畔何人初见月？江月何年初照人？<br>人生代代无穷已，江月年年只相似。<br>不知江月待何人，但见长江送流水。<br>白云一片去悠悠，青枫浦上不胜愁。<br>谁家今夜扁舟子？何处相思明月楼？<br>可怜楼上月徘徊，应照离人妆镜台。<br>玉户帘中卷不去，捣衣砧上拂还来。<br>此时相望不相闻，愿逐月华流照君。<br>鸿雁长飞光不度，鱼龙潜跃水成文。<br>昨夜闲潭梦落花，可怜春半不还家。<br>江水流春去欲尽，江潭落月复西斜。<br>斜月沉沉藏海雾，碣石潇湘无限路。<br>不知乘月几人归，落月摇情满江树。</p></blockquote>&emsp;</p><p><blockquote class="blockquote-center"><p><strong>摸鱼儿</strong><br><em>——元好问</em></p><p>问世间，情为何物，直教生死相许？<br>天南地北双飞客，老翅几回寒暑。<br>欢乐趣，离别苦，就中更有痴儿女。<br>君应有语：渺万里层云，千山暮雪，只影向谁去？</p><p>横汾路，寂寞当年萧鼓，荒烟依旧平楚。<br>招魂楚些何嗟及，山鬼暗啼风雨。<br>天也妒，未信与，莺儿燕子俱黄土。<br>千秋万古，为留待骚人，狂歌痛饮，来访雁丘处。</p></blockquote>&emsp;<br><blockquote class="blockquote-center"><p><strong>临江仙·送钱穆父</strong><br><em>——苏轼</em></p><p>一别都门三改火，天涯踏尽红尘。<br>依然一笑作春温。<br>无波真古井，有节是秋筠。</p><p>惆怅孤帆连夜发，送行淡月微云。<br>樽前不用翠眉颦。<br>人生如逆旅，我亦是行人。</p></blockquote>&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;strong&gt;诗词几首&lt;/strong&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="文字" scheme="http://www.biueo.com/categories/%E6%96%87%E5%AD%97/"/>
    
    
      <category term="诗词" scheme="http://www.biueo.com/tags/%E8%AF%97%E8%AF%8D/"/>
    
      <category term="文字" scheme="http://www.biueo.com/tags/%E6%96%87%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>hexo的Next主题添加相册</title>
    <link href="http://www.biueo.com/2018/02/17/hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C/"/>
    <id>http://www.biueo.com/2018/02/17/hexo的Next主题添加相册/</id>
    <published>2018-02-17T06:22:00.000Z</published>
    <updated>2019-01-02T15:34:31.860Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>hexo的Next主题默认是不含有相册页面的,如果想添加此页面需自行编写</p></blockquote><a id="more"></a><h2 id="图片的处理"><a href="#图片的处理" class="headerlink" title="图片的处理"></a>图片的处理</h2><ol><li><p>图片需要保存在其他云端，这里为了方便存放在GitHub，首先随便在一个位置创建一个新的文件夹，这里我创建文件夹Blog_Album,然后cd到此文件夹执行，<code>git init</code>在此文件夹内新建一个文件夹<code>/photos</code> 在这里存放需要放的图片。</p></li><li><p>使用一个Python小脚本对图片进行编辑，并且压缩上传到自己的GitHub，这就需要我们现在GitHub上新建一个Repository,这里命名为Blog_Album, 然后在本地连接远程仓库执行<code>git remote add origin yourrepositroy@gitaddress</code></p></li><li><p>然后下载脚本<a href="https://github.com/biueo/Blog_Album/blob/master/tool.py" target="_blank" rel="noopener">tool.py</a>文件至此文件内，此文件需要<a href="https://github.com/biueo/Blog_Album/blob/master/ImageProcess.py" target="_blank" rel="noopener">Imageprocessing.py</a>文件的支持,可以将此文件保存在你的python3包的安装位置<code>/users/you/anaconda3/lib/python3.6/site-packages/</code><br><strong>如果没有PIL库的话会报错，安装即可！</strong><br>此外图片命名方式需要按照特定方式即：<code>2017-02-02_discriptionofyourpic.jpg</code>图片支持常见格式，时间和描述之间存在<strong>下划线</strong></p></li><li><p>行tool.py会生成data.json文件，此文件存储了图片的链接，名称和简介，存放位置修改为你的hexo博客主题下特定位置，这里因为是后期加入的相册，所以我在<code>/hexo/themes/next/source/lib</code>中新建一个文件夹<code>album</code>来存放相册文件。所以tool.py生成data.json需要存放在这里。大约在133-134行中进行修改</p></li></ol><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    list_info.reverse()  # 翻转</span><br><span class="line">    final_dict = &#123;"list": list_info&#125;</span><br><span class="line"><span class="deletion">-   with open("/Users/ddc/Desktop/MyBlog/themes/next/source/lib/album/data.json","w") as fp:</span></span><br><span class="line"><span class="addition">+   with open("path/to/yourblog/themes/next/source/lib/album/data.json","w") as fp:</span></span><br><span class="line">        json.dump(final_dict, fp)</span><br></pre></td></tr></table></figure><h2 id="相册页面"><a href="#相册页面" class="headerlink" title="相册页面"></a>相册页面</h2><ul><li><p>在博客根目录下添加photo页面<code>hexo n page photos</code>,在blog的themes的Next中的<code>_config.yml</code>配置文件中menu选项中添加photos:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  categories: /categories/ || th-list</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  音乐: /music/ || music</span><br><span class="line"><span class="addition">+ 相册: /photos  || camera</span></span><br></pre></td></tr></table></figure></li><li><p>在photos中的index.md添加上下面代码，或者可以直接使用我的<a href="https://github.com/biueo/Hexo_Next_Album/blob/master/index.md" target="_blank" rel="noopener">index.md</a>只需将里面的博客链接地址修改为你的博客地址即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 照片</span><br><span class="line">date: 2018-2-15 22:32:22</span><br><span class="line">type: "photos"</span><br><span class="line">fancybox: false</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../lib/album/ins.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../lib/album/photoswipe.css"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../lib/album/default-skin/default-skin.css"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"photos-btn-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"photos-btn active"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external"</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"instagram itemscope"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.biueo.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"open-ins"</span>&gt;</span>图片正在加载中…<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  (function() &#123;</span></span><br><span class="line"><span class="undefined">    var loadScript = function(path) &#123;</span></span><br><span class="line"><span class="undefined">      var $script = document.createElement('script')</span></span><br><span class="line"><span class="undefined">      document.getElementsByTagName('body')[0].appendChild($script)</span></span><br><span class="line"><span class="undefined">      $script.setAttribute('src', path)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    setTimeout(function() &#123;</span></span><br><span class="line"><span class="undefined">        loadScript('../lib/album/ins.js')</span></span><br><span class="line"><span class="undefined">    &#125;, 0)</span></span><br><span class="line"><span class="undefined">  &#125;)()</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从index就可以看出我们还需要添加css文件和js文件，这些文件我已经上传到GitHub中地址在<a href="https://github.com/biueo/Hexo_Next_Album" target="_blank" rel="noopener">这里</a>将这里除了<code>index.md</code>,<code>photoswipe-ui-default.min.js</code>,<code>photoswipe.min.js</code>三个文件的其他文件全部拷贝到前面创建的<code>/hexo/themes/next/source/lib/album</code>中。将<code>photoswipe-ui-default.min.js</code>,<code>photoswipe.min.js</code>两个文件添加到themes/next/source/js/src中。</p></li><li><p>对ins.js文件进行一个简单的修正，将里面大约在121和122行左右的连接修改为你的GitHub中图片连接地址</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    var minSrc = 'https://raw.githubusercontent.com/biueo/Blog_Album/master/min_photos/' + data.link[i];</span></span><br><span class="line"><span class="deletion">-    var src = 'https://raw.githubusercontent.com/biueo/Blog_Album/master/photos/' + data.link[i];</span></span><br><span class="line"><span class="addition">+    var minSrc = 'https://raw.githubusercontent.com/yougithubname/pathtoyourphotos/min_photos/' + data.link[i];</span></span><br><span class="line"><span class="addition">+    var src = 'https://raw.githubusercontent.com/yougithubname/pathtoyourphotos/photos/' + data.link[i];</span></span><br></pre></td></tr></table></figure></li></ul><p>确保你的图片地址是正确的，否则加载不出来，检测方法可以将选择一个图片地址看能不能再浏览器中打开。</p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>上面属于资源的配置，下面是引用配置，在next/layout/_layout.swig的头部<code>&lt;/head&gt;</code>前添加对js文件的引用如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在body中添加如下的内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.type === "photos" %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- Root element of PhotoSwipe. Must have class pswp. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__scroll-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__ui pswp__ui--hidden"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__top-bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__counter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--close"</span> <span class="attr">title</span>=<span class="string">"Close (Esc)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--share"</span> <span class="attr">title</span>=<span class="string">"Share"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--fs"</span> <span class="attr">title</span>=<span class="string">"Toggle fullscreen"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--zoom"</span> <span class="attr">title</span>=<span class="string">"Zoom in/out"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- element will get class pswp__preloader--active when preloader is running --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__icn"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__cut"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__preloader__donut"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-modal pswp__share-modal--hidden pswp__single-tap"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__share-tooltip"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--left"</span> <span class="attr">title</span>=<span class="string">"Previous (arrow left)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pswp__button pswp__button--arrow--right"</span> <span class="attr">title</span>=<span class="string">"Next (arrow right)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pswp__caption__center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><ul><li>在/themes/next/layout/_scripts/pages/post-details.swig中添加：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for(theme.js) &#125;&#125;/src/photoswipe-ui-default.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此所有的配置已经完成。相册应该也能够正常显示了</p><h2 id="一些小优化"><a href="#一些小优化" class="headerlink" title="一些小优化"></a>一些小优化</h2><p>当主题设置fancyboxy为True时，在相册页面存在冲突去掉主题的fancybox所以对/themes/next/layout/_partials/head.swig文件进行修改：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+&#123;% if page.type === "photos"  %&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% set theme.fancybox = false %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% if page.type !== "photos"  %&#125;</span></span><br><span class="line"><span class="addition">+  &#123;% set theme.fancybox = true %&#125;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% if theme.fancybox  %&#125;</span><br><span class="line">  &#123;% set fancybox_css_uri = url_for(theme.vendors._internal + '/fancybox/source/jquery.fancybox.css?v=2.1.5') %&#125;</span><br><span class="line">  &#123;% if theme.vendors.fancybox_css %&#125;</span><br><span class="line">    &#123;% set fancybox_css_uri = theme.vendors.fancybox_css %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &lt;link href="&#123;&#123; fancybox_css_uri &#125;&#125;" rel="stylesheet" type="text/css" /&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="Enjoy-it"><a href="#Enjoy-it" class="headerlink" title="Enjoy it"></a>Enjoy it</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;hexo的Next主题默认是不含有相册页面的,如果想添加此页面需自行编写&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo博客搭建" scheme="http://www.biueo.com/categories/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="http://www.biueo.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://www.biueo.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>辞旧迎新</title>
    <link href="http://www.biueo.com/2018/02/15/%E8%BE%9E%E6%97%A7%E8%BF%8E%E6%96%B0/"/>
    <id>http://www.biueo.com/2018/02/15/辞旧迎新/</id>
    <published>2018-02-15T15:34:17.000Z</published>
    <updated>2019-01-02T15:34:48.205Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>辞旧迎新总结一下过去一年 </p></blockquote><a id="more"></a><p>&emsp;2017年还剩十几分钟就要过去了，在这除夕之夜兴起总结一下过去一年，大的来说这一年并没有大成，学业还是没有发表一篇paper,没有大的成就，到时迷上了前段和python,系统的学习了python,以及前段部分内容期间基于hexo创建了这个网站。感情方面是这一年最大的收获，4月16号和我的另一半走到了一起。希望一直走下去。突然这么一想还真是想不到什么东西了，看来这一年着实没干多少事情。<br>&emsp;下一年要努力了，不要违背自己当初信仰，天道酬勤。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;辞旧迎新总结一下过去一年 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《PythonCookbook》笔记</title>
    <link href="http://www.biueo.com/2018/02/11/%E3%80%8APythonCookbook%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.biueo.com/2018/02/11/《PythonCookbook》笔记/</id>
    <published>2018-02-11T06:35:38.000Z</published>
    <updated>2019-01-02T15:34:40.609Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>python cookbook零碎知识记录</p></blockquote><a id="more"></a><h2 id="字符串和文本笔记"><a href="#字符串和文本笔记" class="headerlink" title="字符串和文本笔记"></a>字符串和文本笔记</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">line=<span class="string">'asbs fdadf; asdfa, adf,asdf,  foo'</span></span><br><span class="line">re.split(<span class="string">r'[,;\s]\s*'</span>,line)</span><br></pre></td></tr></table></figure><pre><code>[&#39;asbs&#39;, &#39;fdadf&#39;, &#39;asdfa&#39;, &#39;adf&#39;, &#39;asdf&#39;, &#39;foo&#39;]</code></pre><p>注：\s表示空格，</p><h2 id="数字日期和时间"><a href="#数字日期和时间" class="headerlink" title="数字日期和时间"></a>数字日期和时间</h2><h3 id="对数值取整"><a href="#对数值取整" class="headerlink" title="对数值取整"></a>对数值取整</h3><p>内建函数round(value,ndigits)取整操作，四舍五入，偶数位优先。</p><ul><li>ndigits可以取负数，表示取整到十位百位千位。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(round(<span class="number">1.25</span>,<span class="number">1</span>))</span><br><span class="line">print(round(<span class="number">11.25</span>,<span class="number">-1</span>))</span><br><span class="line">print(type(round(<span class="number">11.25</span>,<span class="number">-1</span>)))</span><br></pre></td></tr></table></figure><pre><code>1.210.0&lt;class &#39;float&#39;&gt;</code></pre><p>如果只是对数值的格式化输出，无需使用round()函数取整，只需输出时进行格式化即可,值得本身并没有变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">1234.512</span></span><br><span class="line">print(format(x,<span class="string">'0.2f'</span>))</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>1234.511234.512</code></pre><h3 id="精确的小数计算"><a href="#精确的小数计算" class="headerlink" title="精确的小数计算"></a>精确的小数计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浮点数天生会产生误差比如：</span></span><br><span class="line">print(<span class="number">2.1</span>+<span class="number">3.2</span>)</span><br></pre></td></tr></table></figure><pre><code>5.300000000000001</code></pre><p>解决方案使用decimal模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">a=Decimal(<span class="string">'3.2'</span>)</span><br><span class="line">b=Decimal(<span class="string">'2.1'</span>)</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure><pre><code>5.3</code></pre><p>Decimal对象支持所有常见的数学操作</p><h3 id="数值格式化输出"><a href="#数值格式化输出" class="headerlink" title="数值格式化输出"></a>数值格式化输出</h3><p>使用内建的format函数即可格式化输出：<br>指定宽度和精度的一般格式为：”[&lt;&gt;^]?width[,]?(.digits)?”这里width和digits表示宽度和精度，？表示可选部分。同样的方式可以使用在字符串.format()中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">12345.678</span></span><br><span class="line">print(<span class="string">'the value is &#123;:0,.2f&#125;'</span>.format(x))</span><br><span class="line">print(format(x,<span class="string">'0.2f'</span>))</span><br><span class="line">print(format(x,<span class="string">'&gt;10.1f'</span>))<span class="comment"># 右对齐</span></span><br><span class="line">print(format(x,<span class="string">'&lt;10.1f'</span>))<span class="comment">#左对齐</span></span><br><span class="line">print(format(x,<span class="string">'^10.1f'</span>))<span class="comment">#居中对齐</span></span><br><span class="line">print(format(x,<span class="string">','</span>))  <span class="comment"># 带有逗号分隔符</span></span><br><span class="line">print(format(x,<span class="string">'0,.2f'</span>))</span><br></pre></td></tr></table></figure><pre><code>the value is 12,345.6812345.68   12345.712345.7    12345.7  12,345.67812,345.68</code></pre><p>注：</p><ul><li>若想使用科学计数法，只需将上述中的f换成e或者E即可</li><li>python代码中常用%作为格式符，但是比起format来讲并不是很强大。比如添加千位分隔符。</li></ul><h3 id="二进制、八进制、十六进制"><a href="#二进制、八进制、十六进制" class="headerlink" title="二进制、八进制、十六进制"></a>二进制、八进制、十六进制</h3><p>可以使用内建函数bin(),oct(),hex(),进行数值转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">-1234</span></span><br><span class="line">print(bin(x))</span><br><span class="line">print(oct(x))</span><br><span class="line">print(hex(x))</span><br><span class="line"><span class="comment">## 如果不希望出现0b,0o,0x字符可以使用format函数</span></span><br><span class="line">print(format(x,<span class="string">'b'</span>))</span><br><span class="line">print(format(x,<span class="string">'o'</span>))</span><br><span class="line">print(format(x,<span class="string">'x'</span>))</span><br><span class="line"><span class="comment">##如果希望得到一个无符号数值，需要加上最大值来设置比特位长度比如：</span></span><br><span class="line">print(format(<span class="number">2</span>**<span class="number">32</span>+x,<span class="string">'b'</span>))</span><br><span class="line">print(format(<span class="number">2</span>**<span class="number">32</span>+x,<span class="string">'o'</span>))</span><br><span class="line">print(format(<span class="number">2</span>**<span class="number">32</span>+x,<span class="string">'x'</span>))</span><br></pre></td></tr></table></figure><pre><code>-0b10011010010-0o2322-0x4d2-10011010010-2322-4d21111111111111111111110110010111037777775456fffffb2e</code></pre><p>注:</p><ul><li>python语言使用时确保八进制，二进制，十六进制数前面添加0b,0o,0x的前缀。</li></ul><h3 id="复数的运算"><a href="#复数的运算" class="headerlink" title="复数的运算"></a>复数的运算</h3><p>复数可以使用complex(real,imag)来指定，或者通过浮点数添加后缀j来表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=complex(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">b=<span class="number">1</span>+<span class="number">2j</span></span><br><span class="line">print(a,b)</span><br><span class="line">print(a.real,a.imag,a.conjugate())<span class="comment"># 取a得实部，虚部以及共轭</span></span><br></pre></td></tr></table></figure><pre><code>(1+2j) (1+2j)1.0 2.0 (1-2j)</code></pre><p>所有常见的数学操作均适用于复数的运算。对于复数的函数操作，比如正弦，余弦等可以使用cmath模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>+<span class="number">2j</span></span><br><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line">print(cmath.sin(a))</span><br><span class="line">print(cmath.sqrt(<span class="number">-1</span>))</span><br></pre></td></tr></table></figure><pre><code>(3.165778513216168+1.959601041421606j)1j</code></pre><h3 id="无穷大和NAN"><a href="#无穷大和NAN" class="headerlink" title="无穷大和NAN"></a>无穷大和NAN</h3><p>首先检测是否出现了这些值，使用math.isinf()和math.isnan()函数进行判断</p><h3 id="分数的计算"><a href="#分数的计算" class="headerlink" title="分数的计算"></a>分数的计算</h3><p>使用fractions模块可以处理设计分数的数学计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line">a=Fraction(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line">b=Fraction(<span class="number">7</span>,<span class="number">16</span>)</span><br><span class="line">print(a+b)</span><br><span class="line">print(a*b)</span><br></pre></td></tr></table></figure><pre><code>27/1635/64</code></pre><h3 id="处理大型数组的计算"><a href="#处理大型数组的计算" class="headerlink" title="处理大型数组的计算"></a>处理大型数组的计算</h3><p>一般使用numpy</p><h3 id="随机选择"><a href="#随机选择" class="headerlink" title="随机选择"></a>随机选择</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">value=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">random.choice(value)<span class="comment">#从values中随机取出一个元素</span></span><br><span class="line">random.sample(values,<span class="number">2</span>) <span class="comment">#从values中随机剔除至2个元素</span></span><br><span class="line">random.shuffle(values)<span class="comment">#打乱values元素顺序</span></span><br><span class="line">random.randint(<span class="number">0</span>,<span class="number">10</span>)<span class="comment">#从0到10中随机取一个整数</span></span><br><span class="line">random.random()<span class="comment">#0到1中取一个浮点数值</span></span><br></pre></td></tr></table></figure><p>更详细的说明参考random库的文档</p><h3 id="时间换算"><a href="#时间换算" class="headerlink" title="时间换算"></a>时间换算</h3><p>主要讲解datetime模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">a=timedelta(days=<span class="number">2</span>,hours=<span class="number">6</span>)</span><br><span class="line">b=timedelta(hours=<span class="number">4.5</span>)</span><br><span class="line">c=a+b</span><br><span class="line">print(c.days)</span><br><span class="line">print(c.seconds)</span><br><span class="line">print(c.seconds/<span class="number">3600</span>)</span><br><span class="line">print(c.total_seconds()/<span class="number">3600</span>)</span><br></pre></td></tr></table></figure><pre><code>23780010.558.5</code></pre><p>datetime模块可以创建特定的日期和时间，并使用标准的数学运算来操作他们</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">a=datetime(<span class="number">2013</span>,<span class="number">11</span>,<span class="number">29</span>)</span><br><span class="line">print(a+timedelta(days=<span class="number">10</span>))</span><br></pre></td></tr></table></figure><pre><code>2013-12-09 00:00:00</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b=datetime(<span class="number">2018</span>,<span class="number">2</span>,<span class="number">14</span>)</span><br><span class="line">d=b-a</span><br><span class="line">print(d)</span><br><span class="line">print(d.days)</span><br></pre></td></tr></table></figure><pre><code>1538 days, 0:00:001538</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now=datetime.today()</span><br><span class="line">print(now)</span><br></pre></td></tr></table></figure><pre><code>2018-02-14 15:08:20.589790</code></pre><p>datetime模块是默认处理闰年的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=datetime(<span class="number">2012</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">b=datetime(<span class="number">2012</span>,<span class="number">2</span>,<span class="number">28</span>)</span><br><span class="line">print((a-b).days)</span><br><span class="line">c=datetime(<span class="number">2013</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">d=datetime(<span class="number">2013</span>,<span class="number">2</span>,<span class="number">28</span>)</span><br><span class="line">print((c-d).days)</span><br></pre></td></tr></table></figure><pre><code>21</code></pre><h3 id="字符串转化为日期"><a href="#字符串转化为日期" class="headerlink" title="字符串转化为日期"></a>字符串转化为日期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">text=<span class="string">'2012-2-12'</span></span><br><span class="line">y=datetime.strptime(text,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">z=datetime.now()</span><br><span class="line">print(z-y)</span><br><span class="line"><span class="comment">## 或者速度更快</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ymd</span><span class="params">(text)</span>:</span></span><br><span class="line">    y,m,d=text.split(<span class="string">'-'</span>)</span><br><span class="line">    <span class="keyword">return</span> datetime(int(y),int(m),int(d))</span><br><span class="line">print(get_ymd(text))</span><br></pre></td></tr></table></figure><pre><code>2194 days, 16:41:38.4446292012-02-12 00:00:00</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;python cookbook零碎知识记录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.biueo.com/tags/Python/"/>
    
      <category term="学习笔记" scheme="http://www.biueo.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>树莓派穿透校园网下载文献</title>
    <link href="http://www.biueo.com/2018/02/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A9%BF%E9%80%8F%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%96%87%E7%8C%AE/"/>
    <id>http://www.biueo.com/2018/02/06/树莓派穿透校园网下载文献/</id>
    <published>2018-02-06T10:58:19.000Z</published>
    <updated>2019-01-02T15:34:44.987Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>使用树莓派穿透校园网，实现非校园网访问文献数据库，上谷歌学术</p></blockquote><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>对于研究生来说谷歌和谷歌学术真的必不可少，但是一般在家中基本连不上这两个网站。博主马上也要放假了，在家说不定还能瞄几眼文献，所以就用现有的设备搞一个小服务器。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>树莓派一套</li><li>shadowsocks</li><li>VPS或者一个云主机比如(新浪云或者腾讯云,阿里云等)</li><li>自己使用的电脑mac或者windows</li></ol><h2 id="树莓派的配置"><a href="#树莓派的配置" class="headerlink" title="树莓派的配置"></a>树莓派的配置</h2><h3 id="树莓派的链接"><a href="#树莓派的链接" class="headerlink" title="树莓派的链接"></a>树莓派的链接</h3><p>我有一块显示屏，省掉了很多麻烦事情。当然没有显示屏可以利用ssh进行链接访问<br>使用ssh命令<br>树莓派默认的用户为raspberrrypi 我们启用root权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ipofyourraspberry</span><br><span class="line">su</span><br></pre></td></tr></table></figure></p><h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="创建shadowsocks服务器"><a href="#创建shadowsocks服务器" class="headerlink" title="创建shadowsocks服务器"></a>创建shadowsocks服务器</h3><p>如果你之前没有接触过ss<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">这里</a>有介绍<br>首先配置文件<br>首先创建文件：sudo mkdir /etc/shadowsocks/config.json<br>修改配置文件: sudo vi /etc/shadowsocks/config.json</p><p>添加代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"server_port"</span>: <span class="number">443</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"password"</span>: <span class="string">"celerysoft.github.io"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"fast_open"</span>: false,</span><br><span class="line"></span><br><span class="line"><span class="string">"workers"</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数解释：</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>server</td><td>服务端监听地址(IPv4或IPv6)</td></tr><tr><td>server_port</td><td>服务端端口，一般为443</td></tr><tr><td>local_address</td><td>本地监听地址，缺省为127.0.0.1</td></tr><tr><td>local_port</td><td>本地监听端口，一般为1080</td></tr><tr><td>password</td><td>用以加密的密匙</td></tr><tr><td>timeout</td><td>超时时间（秒）</td></tr><tr><td>method</td><td>加密方法，默认为aes-256-cfb，更多请查阅Encryption</td></tr><tr><td>fast_open</td><td>是否启用TCP-Fast-Open，true或者false</td></tr><tr><td>workers</td><td>worker数量，如果不理解含义请不要改（这个只在Unix和Linux下有用）</td></tr></tbody></table></div><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks/config.json -d start</span><br></pre></td></tr></table></figure><h3 id="关闭服务器"><a href="#关闭服务器" class="headerlink" title="关闭服务器"></a>关闭服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks/config.json -d stop</span><br></pre></td></tr></table></figure><h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks/config.json -d restart</span><br></pre></td></tr></table></figure><h3 id="添加到开机启动项"><a href="#添加到开机启动项" class="headerlink" title="添加到开机启动项"></a>添加到开机启动项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local  <span class="comment">## 在exit 0前面添加sudo ssserver -c /etc/shadowsocks/config.json -d start</span></span><br><span class="line"><span class="comment">## 可实现开机运行我们</span></span><br></pre></td></tr></table></figure><h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><p>如果出错可能是因为cleanup需要被更换成reset<br>我们看一下shadowsocks安装位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip show --files shadowsocks</span><br><span class="line"></span><br><span class="line">Name: shadowsocks</span><br><span class="line">Version: 2.8.2</span><br><span class="line">Summary: A fast tunnel proxy that help you get through firewalls</span><br><span class="line">Home-page: https://github.com/shadowsocks/shadowsocks</span><br><span class="line">Author: clowwindy</span><br><span class="line">Author-email: clowwindy42@gmail.com</span><br><span class="line">License: http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">Location: /usr/local/lib/python2.7/dist-packages</span><br><span class="line">Requires: </span><br><span class="line">Files:</span><br><span class="line">  ../../../bin/sslocal</span><br><span class="line">  .....</span><br></pre></td></tr></table></figure></p><p>可以看到shandowsock安装的具体位置，cd到其中将<code>openssl.py</code>文件中的<code>clean_up</code>全部替换为<code>reset</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</span><br></pre></td></tr></table></figure></p><p>然后再启动就OK了</p><h3 id="连接云主机"><a href="#连接云主机" class="headerlink" title="连接云主机"></a>连接云主机</h3><p>这一部分放在云主机配置完后再讲具体命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh -fNC -R 0.0.0.0:1080:127.0.0.1:443 ubuntu@biueo.com</span><br></pre></td></tr></table></figure></p><h2 id="云主机的配置"><a href="#云主机的配置" class="headerlink" title="云主机的配置"></a>云主机的配置</h2><p>&emsp;&emsp;树莓派配置好了，云主机的配置就简单了，他的作用就是能够让非局域网的网友以此为跳板访问局域网，就是所谓的内网穿透，我们的云主机负责接受访问请求，然后转发给树莓派，树莓派请求校园网主机，然后依次返回结果。</p><h3 id="云主机配置端口映射"><a href="#云主机配置端口映射" class="headerlink" title="云主机配置端口映射"></a>云主机配置端口映射</h3><p>&emsp;&emsp;首先你需要确保，这台远程机器允许远程转发，需要做的是登录它，我同样适用使用ssh进行登录，我的主机是ubuntu系统，并且已经和域名绑定了，这一点非常方便，直接输入域名即可，<code>ssh username@biueo.com</code> ,然后修改<code>/etc/ssh/sshd_config</code>文件，在 文件末尾添加<code>GatewayPorts yes</code>，然后用命令<code>sudo service ssh reload</code>重启ssh服务器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh username@biueo.com(这里是你的主机ip)</span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#添加GatewayPorts yes</span></span><br><span class="line">sudo service ssh reload</span><br></pre></td></tr></table></figure></p><p>&emsp;确保你的特定端口没有被使用，我们适用1080端口用命令查看端口占用情况：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:<span class="number">1080</span> </span><br><span class="line">sudo kill PID（进程PID号）<span class="comment">##杀死占用端口的进程</span></span><br></pre></td></tr></table></figure></p><h3 id="树莓派连接云主机"><a href="#树莓派连接云主机" class="headerlink" title="树莓派连接云主机"></a>树莓派连接云主机</h3><p>使树莓派通过服务器端口，listen云主机转发的请求，然后传递给校园网服务器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -fNC -R <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">1080</span>:yourhostname:<span class="number">443</span> your-user-name@your-server-ip  <span class="comment"># yourhostname可以用127.0.0.1代替</span></span><br></pre></td></tr></table></figure></p><p>这时候应该需要输入云主机的登录密码，输入即可。</p><h2 id="客户端使用shadowsocks"><a href="#客户端使用shadowsocks" class="headerlink" title="客户端使用shadowsocks"></a>客户端使用shadowsocks</h2><p>上面介绍的这种方式需要通过shadowsocks登录，需要各个平台下载不同的shadowsocks，地址<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">参考这里</a><br>然后输入你的云主机ip地址和端口1080密码是你在树莓派上设置的password,然后即可使用。<br>因为我的校园网可以通过ipv6访问google,这样通过代理也能够访问google了。<br><img src="http://img.biueo.com//18-2-6/76609985.jpg" alt=""></p><h3 id="选择代理方式"><a href="#选择代理方式" class="headerlink" title="选择代理方式"></a>选择代理方式</h3><p>这样需要我们在树莓派上直接开一个shadowsocks客户端和一个服务器。客户端负责连接服务器，云主机不做改变，这样我们可以只需要在特定的平台改变代理就可了，不需要安装shadowsocks.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p 443 -k password -m aes-256-cfb    #打开服务器 password改成自己的密码</span><br><span class="line">sslocal -s 127.0.0.1 -p 443 -b 127.0.0.1 -l 1080 -k password  #创建客户端</span><br></pre></td></tr></table></figure></p><p>然后在自己的pc或者手机上添加代理，具体的可以参考<a href="https://zh.wikihow.com/%E6%9B%B4%E6%94%B9%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">这里</a></p><center><strong>Enjoy it! <img id="github-emoji" style="display:inline;vertical-align:center" alt="bowtie" src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8" height="20" width="20"></strong></center><p>附上一个小笔记：树莓派重启samba使用：<code>sudo /etc/init.d/samba restart</code><br>树莓派ip查看<br>hostname I<br>树莓派hosts位置<br>/etc/hosts<br>树莓派查看端口<br>netstat -anp<br>树莓派启动ipv6<br>vi /etc/modprobe.d/ipv6.conf</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;使用树莓派穿透校园网，实现非校园网访问文献数据库，上谷歌学术&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://www.biueo.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://www.biueo.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="SSH" scheme="http://www.biueo.com/tags/SSH/"/>
    
      <category term="内网穿透" scheme="http://www.biueo.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="ShadowSocks" scheme="http://www.biueo.com/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>Python字典笔记</title>
    <link href="http://www.biueo.com/2018/01/27/Python%E5%AD%97%E5%85%B8%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.biueo.com/2018/01/27/Python字典笔记/</id>
    <published>2018-01-27T13:17:04.000Z</published>
    <updated>2019-01-02T15:34:38.202Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>Python核心编程字典学习笔记</p></blockquote><a id="more"></a><p><img src="http://img.biueo.com//18-1-27/83901166.jpg" alt=""></p><p>映射类型的内建方法</p><div class="table-container"><table><thead><tr><th>方法名字</th><th>操作</th></tr></thead><tbody><tr><td>dict.clear()</td><td>删除字典中所有元素</td></tr><tr><td>dict clear()</td><td>返回字典的一个副本</td></tr><tr><td>dict.fromkeys(seq,valNone)</td><td>创建并且返回一个新字典，以seq中的元素作为该字典的键，val做该字典中所有键对应的初始值如果没有此值返回None</td></tr><tr><td>dict.get(key,default=None)</td><td>对字典的键Key进行取值，没有返回default的值</td></tr><tr><td>dict.has_key(key)</td><td>判断字典中是否存在键key，如果存在返回True,否则False.</td></tr><tr><td>dict.items()</td><td>返回一个包含字典的键、值对元组的列表</td></tr><tr><td>dict.keys()</td><td>返回一个包含字典中键的列表</td></tr><tr><td>dict.iter()</td><td>方法iteritems(),iterkeys(),itervalues()与它们对应的非迭代方法一样，不同的是它们返回一个迭代子，而不是一个列表</td></tr><tr><td>dict.pop(key[,default=None])</td><td>和get()方法类似，删除并且返回dict[key];如果不存在，且没有给出default则出现异常</td></tr><tr><td>dict.setdefault(key,default=None)</td><td>和set()方法类似，如果不存在key键，由dict[key]=default为他赋值</td></tr><tr><td>dict.update(dict2)</td><td>将字典dict2的键-值对添加到dict中</td></tr><tr><td>dict.values()</td><td>返回一个字典中所有值得列表</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Python核心编程字典学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.biueo.com/tags/Python/"/>
    
      <category term="学习笔记" scheme="http://www.biueo.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="字典" scheme="http://www.biueo.com/tags/%E5%AD%97%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记-字符串、列表</title>
    <link href="http://www.biueo.com/2018/01/27/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%88%97%E8%A1%A8/"/>
    <id>http://www.biueo.com/2018/01/27/python学习笔记-字符串、列表/</id>
    <published>2018-01-27T08:25:02.000Z</published>
    <updated>2019-01-02T15:34:39.189Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>Python核心笔记之字符串、列表和元组 </p></blockquote><a id="more"></a><p><img src="http://img.biueo.com//18-1-27/91406743.jpg" alt=""></p><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>序列包括字符串、列表和元组等他们的成员有序排列，并且通过下标偏移量访问到它的一个或者几个成员。</p><h3 id="序列类型操作符"><a href="#序列类型操作符" class="headerlink" title="序列类型操作符"></a>序列类型操作符</h3><div class="table-container"><table><thead><tr><th>序列操作符</th><th>作用</th></tr></thead><tbody><tr><td>seq[index]</td><td>获得下标index的元素</td></tr><tr><td>seq[ind1:ind2]</td><td>获得下标从ind1到ind2之间的元素(包含ind1,不包含ind2)</td></tr><tr><td>seq*expr</td><td>序列重复expr次</td></tr><tr><td>seq1+seq2</td><td>链接seq1和seq2</td></tr><tr><td>obj in seq</td><td>判断obj是否包含在seq中</td></tr><tr><td>obj not in seq</td><td>判断obj是否不包含在seq中</td></tr></tbody></table></div><p>连接操作符‘+’不是最有效的，对于字符串来说，一般调用<code>join()</code>方法吧所有内容连接在一起，对于列表来说可以使用列表类型的<code>extend()</code>方法将两个或者多个列表对象合并。</p><p>对于切片操作有几种常见的用法：</p><figure class="highlight python"><figcaption><span>切片操作</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">'abcdefgh'</span></span><br><span class="line">s[::<span class="number">-1</span>]  <span class="comment">## 翻转操作</span></span><br><span class="line">s[::<span class="number">2</span>]  <span class="comment">## 隔一个取一个操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="number">-1</span>]</span><br><span class="line"><span class="string">'abcdefg'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="keyword">None</span>]  <span class="comment"># 能够取到最后一个</span></span><br><span class="line"><span class="string">'abcdefgh'</span></span><br></pre></td></tr></table></figure><h3 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h3><p>序列类型转换的工厂函数</p><div class="table-container"><table><thead><tr><th>函数</th><th>含义</th></tr></thead><tbody><tr><td>list(iter)</td><td>把可迭代对象转化为列表</td></tr><tr><td>str(obj)</td><td>把obj对象转化成字符串</td></tr><tr><td>unicoce(obj)</td><td>把对象转化成Unicode字符串，使用默认编码</td></tr><tr><td>basestring()</td><td>抽象工厂函数，其作用仅仅为str和Unicode函数提供父类所以不能被实例化，也不能被调用</td></tr><tr><td>tuple(iter)</td><td>把一个可迭代对下转化成一个元组元素</td></tr></tbody></table></div><p>序列类型可用的内建函数</p><div class="table-container"><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>enumerate(iter)</td><td>接受一个可迭代对象作为参数，返回一个enumerate对象（同时也是一个迭代器）该对象生成由iter每一个元素的index值和item值组成的元组。</td></tr><tr><td>len(seq)</td><td>获得seq的长度</td></tr><tr><td>max(iter,key=None) or min(arg0,arg1…,key=None)</td><td>返回iter或arg0,arg1…中的最大值/最小值，如果指定key,这个key必须是一个可以传给sort()方法的用于比较的回调函数</td></tr><tr><td>reversed(seq)</td><td>接受一个序列作为参数，返回一个以逆序访问的迭代器</td></tr><tr><td>sorted(iter,fun=None,key=None,reverse=False)</td><td>接受一个可迭代对像作为参数，返回一个有序的列表，可选参数func,key和reverse的含义跟list.sort()内建函数的参数含义一样</td></tr><tr><td>sum(seq,init=0)</td><td>返回seq和可选参数init的总和，等同于reduce(operator.add,seq,init)</td></tr><tr><td>zip([it0,it1,…itN])</td><td>返回一个列表，其第一个元素是it0,it1…这些元素的第一个元素组成的一个元组，第二个…依次类推</td></tr></tbody></table></div><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串的比较按照ASCII值的大小来比较的。</p><p>只用于字符串的操作符</p><h3 id="格式化操作符（-）"><a href="#格式化操作符（-）" class="headerlink" title="格式化操作符（%）"></a>格式化操作符（%）</h3><div class="table-container"><table><thead><tr><th>格式化字符</th><th>转换方式</th></tr></thead><tbody><tr><td>%c</td><td>转换成字符(ASCII码值或者长度为一的字符串)</td></tr><tr><td>%r</td><td>优先用repr()函数进行字符串转换</td></tr><tr><td><code>%s</code></td><td>优先使用str()函数进行字符串转换</td></tr><tr><td><code>%d %i</code></td><td>转换成有符号十进制数</td></tr><tr><td>%u</td><td>转换成无符号十进制数</td></tr><tr><td>%o</td><td>转换成无符号八进制数</td></tr><tr><td>%x/%X</td><td>转化成无符号十六进制数</td></tr><tr><td><code>%f/%F</code></td><td>转化成浮点型，小数部分自然截断可以采用%0.2f/%0.nf保留n位小数位</td></tr><tr><td><code>%e/%E</code></td><td>转成科学计数法</td></tr><tr><td>%g/%G</td><td>%s和%f%E和%F的简写</td></tr><tr><td>%%</td><td>输出%</td></tr></tbody></table></div><p>格式化字符辅助指令</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>定义宽度和小数点精度</td></tr><tr><td>-</td><td>用做左对齐</td></tr><tr><td>+</td><td>在整数前面显示空格</td></tr><tr><td><sp></sp></td><td>在正数前面显示空格</td></tr><tr><td>#</td><td>在八进制前面显示零，在十六进制前面显示0x或者0X</td></tr><tr><td>0</td><td>显示数字前面填充‘0’而不是空格</td></tr><tr><td>%</td><td>‘%%’输出一个单一的%</td></tr><tr><td>（var）</td><td>映射变量（字典参数）</td></tr><tr><td>m.n</td><td>m是显示的最小宽度，n是小数点后的位数</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">'%x'</span> % <span class="number">108</span></span><br><span class="line"><span class="string">'6c'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">'%#x'</span> %<span class="number">108</span></span><br><span class="line"><span class="string">'0x6c'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">'%#X'</span> %<span class="number">108</span></span><br><span class="line"><span class="string">'0X6C'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">'%.2f'</span> %<span class="number">123.456</span></span><br><span class="line"><span class="string">'123.45'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">'%+d'</span> %<span class="number">4</span></span><br><span class="line"><span class="string">'+4'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">'%+d'</span> %<span class="number">-4</span></span><br><span class="line"><span class="string">'-4'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'host %s Port :%d'</span> %(<span class="string">'mars'</span>,<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>原始字符串操作符(r/R)<br>Unicode字符串操作符(u/U)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">r'\n'</span></span><br><span class="line"><span class="string">'\\n'</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">u'abc'</span></span><br><span class="line">U+<span class="number">0061</span> U+<span class="number">0062</span> U+<span class="number">0063</span></span><br></pre></td></tr></table></figure><p>字符串类型函数：</p><p><code>input()</code>、str()、unicode()、chr()、unichr()、ord()</p><h3 id="字符串常用内建函数"><a href="#字符串常用内建函数" class="headerlink" title="字符串常用内建函数"></a>字符串常用内建函数</h3><div class="table-container"><table><thead><tr><th>内建函数<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></th><th>解释</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中,并使用空格填充至长度 width 的新串</td></tr><tr><td>string.count(str, beg=0, end=len(string))</td><td>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指返回指定范围内 str 出现的次数</td></tr><tr><td>string.decode(encoding=’UTF-8’, errors=’strict’)</td><td>以 encoding 指定的编码格式解码 string，如果出错默认报ValueError 的异常，除非 errors 指定的是’ignore’或’replace’</td></tr><tr><td>string.encode(encoding=’UTF-8’, errors=’strict’)</td><td>以 encoding 指定的编码格式编码 string，如果出错默认报ValueError的异常， 除非errors指定的是’ignore’或者’repl</td></tr><tr><td>string.endswith(obj, beg=0, end=len(string))</td><td>检查字符串是否以 obj 结束，如果 beg 或者 end 指定则检定的范围内是否以 obj 结束， 如果是， 返回True,否则返回Fa</td></tr><tr><td>string.expandtabs(tabsize=8)</td><td>把字符串 string 中的 tab 符号转为空格， 默认格数 tabsize 是 8.</td></tr><tr><td>string.find(str, beg=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 beg 和 end 指定范则检查是否包含在指定范围内，如果是返回开始的索引值，返回-1</td></tr><tr><td>string.index(str, beg=0, end=len(string))</td><td>跟find()方法一样， 只不过如果str不在string中会报一个异</td></tr><tr><td>string.isalnum()</td><td>a, b, c  R如果string至少有一个字符并且所有字符都是字母或数字回 True,否则返回 False</td></tr><tr><td>string.isalpha()</td><td>a, b, c  如果string至少有一个字符并且所有字符都是字母则返回T否则返回 False</td></tr><tr><td>string.isdecimal()</td><td>b, c, d 如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td>string.isdigit()</td><td>b, c 如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td>string.islower()</td><td>b, c 如果 string 中包含至少一个区分大小写的字符，并且所有这些(大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td>string.isnumeric()</td><td>b, c, d 如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td>string.isspace()</td><td>b, c 如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td>string.istitle()</td><td>b, c 如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td>string.isupper()</td><td>b, c 如果 string 中包含至少一个区分大小写的字符， 并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td>string.join(seq)</td><td>Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写.</td></tr><tr><td>string.lstrip()</td><td>截掉 string 左边的空格</td></tr><tr><td>string.partition(str)</td><td>e 有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td></tr><tr><td>string.replace(str1, str2,  num=string.count(str1))</td><td>把 string 中的 str1 替换成 str2,如果 num 指定，        则替换不超过 num 次.</td></tr><tr><td>string.rfind(str, beg=0,end=len(string))</td><td>类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td>string.rindex( str, beg=0,end=len(string))</td><td>类似于 index()， 不过是从右边开始.</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rpartition(str)</td><td>e  类似于 partition()函数,不过是从右边开始查找.</td></tr><tr><td>string.rstrip()</td><td>删除 string 字符串末尾的空格.</td></tr><tr><td>string.split(str=””, num=string.count(str))</td><td>以 str 为分隔符切片 string，如果 num有指定值，则仅分隔 num 个子字符串</td></tr><tr><td>string.splitlines(num=string.count(‘\n’))</td><td>b, c按照行分隔， 返回一个包含各行作为元素的列表， 如果 num 指定则仅切片 num 个行.</td></tr><tr><td>string.startswith(obj, beg=0,end=len(string))</td><td>b, e检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td>string.strip([obj])</td><td>在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr><tr><td>string.title()</td><td>b, c   返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td>string.translate(str, del=””)</td><td>根据str给出的表(包含256个字符)转换string的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.zfill(width)</td><td>返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table></div><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表类型内建函数"><a href="#列表类型内建函数" class="headerlink" title="列表类型内建函数"></a>列表类型内建函数</h3><div class="table-container"><table><thead><tr><th>列表函数</th><th>作用</th></tr></thead><tbody><tr><td>list.append(obj)</td><td>向列表中添加一个对象obj</td></tr><tr><td>list.count(obj)</td><td>返回一个对象obj在列表中出现的次数</td></tr><tr><td>list.expend(seq)</td><td>把序列seq的内容添加到列表中</td></tr><tr><td>list.index(obj,i=0,j=len(list))</td><td>返回list[k]==obj的k值，并且k的范围在i&lt;=k&lt;j;否则引发ValueError异常</td></tr><tr><td>list.insert(index,obj)</td><td>在索引量为index的位置插入obj</td></tr><tr><td>list.pop(index=-1)</td><td>删除并返回指定位置的对象，默认为最后一个对象</td></tr><tr><td>list.remove(obj)</td><td>从列表中删除对象obj</td></tr><tr><td>list.reverse()</td><td>原地反转列表</td></tr><tr><td>list.sort(func=None,key=None,reverse=False)</td><td>以指定的方式排序列表中的成员，如果func和key参数指定，则按照指定的方式比较各元素，如果reverse为True,则列表以反序排列</td></tr></tbody></table></div><h3 id="列表的特殊特性"><a href="#列表的特殊特性" class="headerlink" title="列表的特殊特性"></a>列表的特殊特性</h3><p>列表可以构建其他数据结构</p><p><strong> 堆栈 </strong></p><p>堆栈是一个后进先出的数据结构，<code>push</code>添加一元素，删除是<code>pop</code></p><p>使用列表的append()和pop()方法实现</p><figure class="highlight python"><figcaption><span>堆栈</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pushit</span><span class="params">()</span>:</span></span><br><span class="line">    stack.append(input(<span class="string">'Enter New String: '</span>).strip())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">popit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(stack)==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'cannot pop from an empty stack'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Remove ['</span>,stack.pop(),<span class="string">',]'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">viewstack</span><span class="params">()</span>:</span></span><br><span class="line">    print(stack)</span><br><span class="line">CMDs=&#123;<span class="string">'u'</span>:pushit,<span class="string">'o'</span>:popit,<span class="string">'v'</span>:viewstack&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showmenu</span><span class="params">()</span>:</span></span><br><span class="line">    pr=<span class="string">'''</span></span><br><span class="line"><span class="string">    P(U)sh</span></span><br><span class="line"><span class="string">    p(O)p</span></span><br><span class="line"><span class="string">    (V)iew</span></span><br><span class="line"><span class="string">    (Q)uit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Enter choice:    </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                choice=input(pr).strip()[<span class="number">0</span>].lower()</span><br><span class="line">            <span class="keyword">except</span>(EOFError,KeyboardInterrupt,IndexError):</span><br><span class="line">                choice=<span class="string">'q'</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">'\n You picked:[%s]'</span> %choice)</span><br><span class="line">            <span class="keyword">if</span> choice <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'uovq'</span>:</span><br><span class="line">                print(<span class="string">'Invalid option ,try agagin'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> choice==<span class="string">'q'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        CMDs[choice]()</span><br><span class="line"><span class="keyword">if</span> __name__()==<span class="string">'__main__'</span>:</span><br><span class="line">    showmenu()</span><br></pre></td></tr></table></figure><p>列表做队列</p><p><strong> 队列 </strong></p><p>队列是一种先进先出的数据类型</p><p>构造是需要将构造堆栈时的pop函数进行一下修改，修改成<code>stack.pop(0)</code></p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组是一种不可变类型，so他可以干一些列表不能干的事情，比如做一个字典的Key</p><p>元组可以进行索引，切片，但是要修改元组则需要新建一个元组。</p><p>本身不可变，但是包含的可变对象则可变</p><p>比如<code>([1,2],3,5)</code>列表则可以变化</p><p>但是元组也不是完全不可变：连接，重复都可以改变元组的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t=(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">t=t+(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>内建的tuple()函数和list()函数可以实现元组和列表之间的转换</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">http://blog.csdn.net/heverst/article/details/76117079</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Python核心笔记之字符串、列表和元组 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.biueo.com/tags/Python/"/>
    
      <category term="学习笔记" scheme="http://www.biueo.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="字符串" scheme="http://www.biueo.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="列表" scheme="http://www.biueo.com/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>python核心编程学习笔记</title>
    <link href="http://www.biueo.com/2018/01/26/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.biueo.com/2018/01/26/python核心编程学习笔记/</id>
    <published>2018-01-26T07:17:31.000Z</published>
    <updated>2018-01-26T16:37:51.000Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>Python核心编程第十三章类的笔记</p></blockquote><div class="description">主要是这章的课后比较经典的习题</div>  <a id="more"></a><p>第一题：  </p><p>函数和方法比较，函数和方法之间的区别是什么？ </p><p>答：  </p><ul><li>函数需要手动传入self,方法不需要</li><li>如果一个函数用类名去掉用，如果是一个方法则需要一个对象去调用。  </li></ul><p>第二题：  </p><p>对类的定制，要求：编写一个dollarize()函数，它以一个浮点型值作为输入，返回一个字符串形式的金额数比如说：dollarize(1234.678) =&gt;’$1,234.678’  </p><p>dollarize()返回的金额数里应该允许存在逗号，如果有符号在应该出现在美元货币符号的左边，完成工作后可以构造一个类用MoneyFmt表示。<br>MoneyFmt类里只有一个数据值，和五个方法构造器<code>__init__</code>初始化，<code>update</code>把数据值更新为一个新值。</p><figure class="highlight python"><figcaption><span>answerto1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoneyFmt</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">''' Format the money to dollar'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,mount)</span>:</span></span><br><span class="line">        self.m=float(<span class="string">'%.2f'</span> %mount)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dollarize</span><span class="params">(self)</span>:</span></span><br><span class="line">        fnum=<span class="string">'%.2f'</span>%self.m</span><br><span class="line">        ffom,*bfom=str(fnum).split(<span class="string">'.'</span>)</span><br><span class="line">        ffom=<span class="string">''</span>.join(self.insertcom(ffom,<span class="number">3</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s.'</span> %ffom+bfom[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertcom</span><span class="params">(self,seq,num)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> seq[<span class="number">0</span>]!=<span class="string">'-'</span>:</span><br><span class="line">            listseq=list(reversed(list(seq)))</span><br><span class="line">            listwithcom=[]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(listseq)):</span><br><span class="line">                listwithcom.append(listseq[i])</span><br><span class="line">                <span class="keyword">if</span> (i+<span class="number">1</span>)%num==<span class="number">0</span> <span class="keyword">and</span> i+<span class="number">1</span>!=len(seq):</span><br><span class="line">                    listwithcom.append(<span class="string">','</span>)</span><br><span class="line">            listwithcom.append(<span class="string">'$'</span>)</span><br><span class="line">            <span class="keyword">return</span> reversed(listwithcom)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            listseq=list(reversed(list(seq[<span class="number">1</span>:])))</span><br><span class="line">            listwithcom=[]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(listseq)):</span><br><span class="line">                listwithcom.append(listseq[i])</span><br><span class="line">                <span class="keyword">if</span> (i+<span class="number">1</span>)%num==<span class="number">0</span> <span class="keyword">and</span> i+<span class="number">1</span>!=len(listseq):</span><br><span class="line">                    listwithcom.append(<span class="string">','</span>)</span><br><span class="line">            listwithcom.append(<span class="string">'$'</span>)</span><br><span class="line">            listwithcom.append(seq[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> reversed(listwithcom)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> val:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.m=float(<span class="string">'%.2f'</span> %val)</span><br><span class="line">            <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">print</span> (e)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.dollarize()</span><br><span class="line"></span><br><span class="line">    __repr__=__str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> self.m&gt;=<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>关于<code>__nonzero__()</code>函数的一个解释</p><div class="note info ">If a class defines it, this special method is called whenever an instance is converted to a Boolean value, either implicitly (for example, when it is the test in an “if” statement) or explicitly via the built-in bool() function. </div><div class="note warning">python3 中使用__bool__()代替他</div> ]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Python核心编程第十三章类的笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;description&quot;&gt;主要是这章的课后比较经典的习题&lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.biueo.com/tags/Python/"/>
    
      <category term="学习笔记" scheme="http://www.biueo.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记1</title>
    <link href="http://www.biueo.com/2018/01/25/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B01/"/>
    <id>http://www.biueo.com/2018/01/25/LeetCode刷题笔记1/</id>
    <published>2018-01-25T08:16:59.000Z</published>
    <updated>2019-01-02T15:34:33.160Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>使用python刷leetcode笔记一</p></blockquote><a id="more"></a><p><img src="http://img.biueo.com//18-1-25/1046514.jpg" alt=""></p><h2 id="第一题-Two-Sum"><a href="#第一题-Two-Sum" class="headerlink" title="第一题 - Two Sum"></a>第一题 - Two Sum</h2><p>链接：<a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener">https://leetcode.com/problems/two-sum/description/</a></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><div class="note info no-icon">题目<br>Given an array of integers, retrun indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice.<br>翻译：<br>给定一个整数数组序列，和一个和的目标值，计算这个序列中是否存在两个数字相加等于目标值，存在返回两个元素的索引，序列中任何一个元素只能使用一次。</div><p><strong> Example: </strong> </p><div class="note info no-icon">    Givern nums =[2,7,11,15],  target=9. <br>     Because nums[0]+nums[1]=2+7=9  <br>    return [0,1]</div><h3 id="结果代码"><a href="#结果代码" class="headerlink" title="结果代码"></a>结果代码</h3><p>先上自己的代码然后比较自己的代码存在的不足之处，</p><figure class="highlight python"><figcaption><span>自己的代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dic=&#123;&#125;</span><br><span class="line">        sub=[ target-i <span class="keyword">for</span> i <span class="keyword">in</span> nums]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> [sub[t] <span class="keyword">for</span> t <span class="keyword">in</span> range(len(nums)) <span class="keyword">if</span> t!=i]:</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> range(len(sub)):</span><br><span class="line">                    <span class="keyword">if</span> nums[i]==sub[t]:</span><br><span class="line">                        j=t</span><br><span class="line">                <span class="keyword">return</span>[i,j]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>虽然能解决问题但是代码过于臃肿，执行效率也不是很高<br>再看网友代码：</p><figure class="highlight python"><figcaption><span>网友代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        budict=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> budict:</span><br><span class="line">                <span class="keyword">return</span> [budict[nums[i]],i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                budict[target-nums[i]]=i</span><br></pre></td></tr></table></figure><p>比较而言，网友代码应该更合适，下面对此代码进行分析理解。</p><h3 id="本题笔记"><a href="#本题笔记" class="headerlink" title="本题笔记"></a>本题笔记</h3><ul><li>代码中使用了字典，关于字典的键值关系可以解决找到索引的功能</li><li>代码中采用for循环，对每次的数值进行查询是否满足之前值和目标值的差值，如果满足则返回此值的序号，以及之前差值的序号，差值的索引就是通过字典功能实现的。</li></ul><h2 id="第二题-Add-Two-Numbers"><a href="#第二题-Add-Two-Numbers" class="headerlink" title="第二题 - Add Two Numbers"></a>第二题 - Add Two Numbers</h2><p>链接：<a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener">https://leetcode.com/problems/add-two-numbers/description/</a></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><div class="note info no-icon">题目<br>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<br>You may assume the two numbers do not contain any leading zero, except the number 0 itself<br>翻译：<br>给定两个非负整数数链表，链表每个值代表数字个十百千……位上的值。</div><p><strong> Example: </strong> </p><div class="note info no-icon">Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)<br>Output: 7 -> 0 -> 8<br>Explanation: 342 + 465 = 807.</div><h3 id="结果代码-1"><a href="#结果代码-1" class="headerlink" title="结果代码"></a>结果代码</h3><p>本题考察到python中的链表</p><figure class="highlight python"><figcaption><span>代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Definition for singly-linked list. </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    carry=<span class="number">0</span> <span class="comment"># 进位数值</span></span><br><span class="line">    result=n=ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addnums</span><span class="params">(self,l1,l2)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">    <span class="keyword">if</span> l1:</span><br><span class="line">    l1c=l1.val</span><br><span class="line">    l1=l1.next</span><br><span class="line">    <span class="keyword">if</span> l2:</span><br><span class="line">    l2c=l2.val</span><br><span class="line">    l2=l2.next</span><br><span class="line">    carry,val=divmod(l1c+l2c+carry,<span class="number">10</span>)</span><br><span class="line">    n.next=ListNode(val)</span><br><span class="line">    n=n.next</span><br><span class="line">    <span class="keyword">return</span> result.next</span><br></pre></td></tr></table></figure><h3 id="本题笔记-1"><a href="#本题笔记-1" class="headerlink" title="本题笔记"></a>本题笔记</h3><ul><li>这道题主要考察链表操作</li><li>链表操作之所以出现result=n=ListNode(0)，因为n在循环叠加中n=n.next会有如此变化，所以直接定义一个等同的值result来实现结果输出。</li></ul><h2 id="第三题-Longest-Substring-Without-Repeating-Characters"><a href="#第三题-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="第三题 - Longest Substring Without Repeating Characters"></a>第三题 - Longest Substring Without Repeating Characters</h2><p>链接:<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-substring-without-repeating-characters/description/</a></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>Given a string, find the length of the longest substring without repeating characters.  </p><p><strong> Examples: </strong></p><p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p><p>Given “bbbbb”, the answer is “b”, with the length of 1.</p><p>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p><p>就是寻找一个字符串中不重复出现的最大长度</p><h3 id="结果代码-2"><a href="#结果代码-2" class="headerlink" title="结果代码"></a>结果代码</h3><figure class="highlight python"><figcaption><span>本人代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(s)&lt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        sub=s[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>):</span><br><span class="line">            j=<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> (s[i+j] <span class="keyword">not</span> <span class="keyword">in</span> s[i:i+j]):</span><br><span class="line">                <span class="keyword">if</span> (i+j+<span class="number">1</span>&lt;=len(s)<span class="number">-1</span>) :</span><br><span class="line">                    j+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j+=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> len(s[i:i+j])&gt;len(sub):</span><br><span class="line">                sub=s[i:i+j]</span><br><span class="line">        <span class="keyword">return</span> len(sub)</span><br></pre></td></tr></table></figure><p>👆是本人代码，虽然记过能够算对，但是最后提交时，一个非常长的字符串运算超出了时间。<br>思想是：<br>从左往右依次查看字符，如果和之前的字符不重复，则继续累加，如果重复则截断，选取当前长度和前面最大截断的长度中最长的哪一个。直到字符串结束为止。</p><figure class="highlight python"><figcaption><span>他人代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        dic, res, start, = &#123;&#125;, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, ch <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="comment"># update the res</span></span><br><span class="line">                res = max(res, i-start)</span><br><span class="line">                <span class="comment"># here should be careful, like "abba"</span></span><br><span class="line">                start = max(start, dic[ch]+<span class="number">1</span>)</span><br><span class="line">            dic[ch] = i</span><br><span class="line">        <span class="comment"># return should consider the last </span></span><br><span class="line">        <span class="comment"># non-repeated substring</span></span><br><span class="line">        <span class="keyword">return</span> max(res, len(s)-start)</span><br></pre></td></tr></table></figure><p>这个代码的思想是，出现重复字符后，计算和前一个相同字符之间的距离，保留最长的哪一个即可。<br><img src="http://img.biueo.com//18-1-25/79401826.jpg" alt=""><br>start逐渐往右移动，语句<code>start=max(start,dic[ch]+1)</code>就是为了防止’abba’这种情况返回左边👈</p><h3 id="本题笔记-2"><a href="#本题笔记-2" class="headerlink" title="本题笔记"></a>本题笔记</h3><ul><li>巩固一下enumerate()函数</li><li>编程中注意时间问题</li><li>每个人的思想不同，最后的程序就不同，所以训练不仅要训练语言的使用能力，更要训练逻辑编程能力</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;使用python刷leetcode笔记一&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.biueo.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://www.biueo.com/tags/LeetCode/"/>
    
      <category term="刷题笔记" scheme="http://www.biueo.com/tags/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>双折射基础知识</title>
    <link href="http://www.biueo.com/2018/01/24/%E5%8F%8C%E6%8A%98%E5%B0%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.biueo.com/2018/01/24/双折射基础知识/</id>
    <published>2018-01-24T15:40:55.000Z</published>
    <updated>2019-01-02T15:34:42.866Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>通过两个PPT学习一下双折射的基础知识 </p></blockquote><a id="more"></a><h2 id="第一篇讲双折射基础知识"><a href="#第一篇讲双折射基础知识" class="headerlink" title="第一篇讲双折射基础知识"></a>第一篇讲双折射基础知识</h2><center><embed src="http://img.biueo.com/%E5%8F%8C%E6%8A%98%E5%B0%84.pdf2.pdf" width="100%" height="500px"></center><h2 id="第二篇PDF主要讲双折射晶体的原理"><a href="#第二篇PDF主要讲双折射晶体的原理" class="headerlink" title="第二篇PDF主要讲双折射晶体的原理"></a>第二篇PDF主要讲双折射晶体的原理</h2><center><embed src="http://img.biueo.com/ch5-6.pdf" width="100%" height="500px"></center>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;通过两个PPT学习一下双折射的基础知识 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="老本行" scheme="http://www.biueo.com/categories/%E8%80%81%E6%9C%AC%E8%A1%8C/"/>
    
    
      <category term="Laser" scheme="http://www.biueo.com/tags/Laser/"/>
    
      <category term="光学基础" scheme="http://www.biueo.com/tags/%E5%85%89%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>干了这碗汤，让我们上路</title>
    <link href="http://www.biueo.com/2018/01/23/%E5%B9%B2%E4%BA%86%E8%BF%99%E7%A2%97%E6%B1%A4%EF%BC%8C%E4%B8%8A%E8%B7%AF/"/>
    <id>http://www.biueo.com/2018/01/23/干了这碗汤，上路/</id>
    <published>2018-01-23T08:57:53.000Z</published>
    <updated>2019-01-02T15:34:43.440Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>40条人生经验，可以认真看看</p></blockquote><a id="more"></a><p><img src="http://img.biueo.com//18-1-23/10373941.jpg" alt=""></p><ol><li><p>除了自身的病患或亲友离去的痛苦是真实的，其他的痛苦都是你自己的价值观带给你的。   </p></li><li><p>沉不下心看书，浮躁和焦虑，都是因为年纪渐长，不信正道而太重功利导致的。  </p></li><li><p>真正坚持到最后的人靠的不是激情，而是恰到好处的喜欢和投入。  </p></li><li><p>一个人明白自己能做什么远比自己想做什么重要得多，前者需要给自己设定一个现实的疆域，是一种尽力而为的勤奋，后者是任性催生的热情，往往来自于对世界的无知和自负。一个人，一定要清楚地认识自己。  </p></li><li><p>便宜莫贪，天下没有免费的午餐。想得到任何东西之前都要先问问自己，是否付得起相应的代价。  </p></li><li><p>在早上把你叫醒的，不应该是闹钟，不应该是闹钟，而应该是昨天早睡。  </p></li><li><p>太用力的人，跑不远，别把人生的马拉松当成百米冲刺；太用力的爱不仅让自己累，也让身边的人累，最终难以圆满。  </p></li><li><p>“事非宜，勿轻诺。苟轻诺，进退错。”没有把握的事情不要轻易答应，如果答应了做不好，进退都是错误的，很容易让自己陷入里外不是人的尴尬局面。  </p></li><li><p>天下古今之庸人，皆以一惰字致败；<br>天下古今之人才，皆以一傲字致败。  </p></li><li><p>你不必去找人脉，唯一需要操心的是要把自己的本事练好。  </p></li><li><p>永远不要与人去辩论，你也很难把别人辩服，因为立场不同，因为没有对错，只有规则，只有利益。圈子不同，不必强融。</p></li><li><p>一定要去掌控自己的生活，而不要让生活带着你走。</p></li><li><p>蔡康永曾说，你15岁的时候觉得游泳难，放弃游泳，到18岁遇见一个你喜欢的人约你去游泳，你只好说：“我不会耶”。你18岁觉得英语难，放弃英语，你28岁遇到了一份非常好也很适合你但是要求会英语的工作，你只好说“我不会耶”。出来混总是要还的，前期偷懒，后期肯定要花数倍的精力来弥补，更遗憾的是，不一定补得上。人生最可怕的事，是一边后悔一边生活。</p></li><li><p>婚姻里的指责和抱怨不是因为“我爱你”，而是因为“我情绪管理不好”。指责不是爱，而是婚姻的杀手。</p></li><li><p>父母的话不全是对的，父母的爱不全是无私的。</p></li><li><p>成熟不等于世故，知世故而不世故，才是最善良的成熟。</p></li><li><p>你其实并没有想象中那么依赖父母，但父母依赖你的程度远远超过于你的想象。</p></li><li><p>尽量不给别人添麻烦，别人最好也别麻烦我。这句话不是冷漠，是成熟。</p></li><li><p>分开的时候一定要用力告别，因为说再见，也许真的是再也不见。</p></li><li><p>所有你此刻觉得不可承受，不可跨越的苦难，一旦经受住了，回头看，不过是浮云一片。</p></li><li><p>当你的学业、工作、生活不顺利的时候，切记不要把爱情当成你的救命稻草。</p></li><li><p>我们总是喜欢拿顺其自然来敷衍人生道路上的荆棘坎坷，却很少承认，真正的顺其自然，其实是竭尽所能之后的不强求，而非两手一摊的不作为。</p></li><li><p>耳不闻人之非，目不视人之短，口不言人之过。 </p></li><li><p>看破不说破，知人不评人，知理不争论。刻薄嘴欠和幽默是两回事，口无遮拦和坦率是两回事，没有教养和随性是两回事。</p></li><li><p>在事情没有成功之前，不要在人前谈及任何有关的计划和想法。世界不会在意你的自尊，只是你的成就。在你没有成就之前，切勿强调自尊。</p></li><li><p>世界不是公平的，人与人之间在某些方面就是天生存在不可逾越的差距。</p></li><li><p>有事情是要说出来的，不要等着对方去领悟，因为对方不是你，不知道你想要什么，等到最后只能是伤心和失望，尤其是感情。</p></li><li><p>社会真的很残酷，你的能力和价值越低，被淘汰的就越快。</p></li><li><p>最简单却也是最难的事：少熬夜，多看书，多喝热水，多运动，用心爱一个人。</p></li><li><p>婚姻不是劫富济贫，女人一定要经济独立。男人对你再好，自己有那才是真的有。</p></li><li><p>无论是男人还是女人，都要学着去做家务。做家务不是谁伺候“谁”的问题，而是培养一个人独立生活的技能。</p></li><li><p>不管平时关系如何，涉及金钱问题，务必要划分清楚。</p></li><li><p>经济能力跟在家里掌握的话语权是成正比的</p></li><li><p>照顾好自己的身体，很有必要。一个很差的身体带给你的局限不可能靠意志力突破。</p></li><li><p>社会没有那么复杂，复杂的是人心。</p></li><li><p>不管外面的世界究竟是什么样，能影响到你的，其实就身边的几个人。没有能力改变这世界，至少可以选择与谁同行。</p></li><li><p>到那种始终不在一个频道死活聊不到一个点上的人就别强求了，也千万不要试图努力，越努力越绝望。在婚姻里，精神上的门当户对比物质更重要。<br>三观不同，真的不能结婚。</p></li><li><p>奋斗就是每一天很难，可一年一年却越来越容易；不奋斗就是每天都很容易，可一天一天越来越难。</p></li><li><p>无论是工作，生活，还是婚姻，不要去攀比嫉妒，没有对比就没有伤害。一生很长，疲惫、烦躁、失望都会有，看清真相后，请依然热爱生活。</p></li><li><p>最后一个道理其实是悖论，就是无论你听过再多的道理，当你没有经历过一些事情或者心智没有达到这个境界的时候，你是不会理解这个道理的。但愿，你的每一步都走得踏实，有力，不后悔。还有，也不要盲目相信上面的话，实践出真知。</p></li></ol><center>*作者：楠瓜，来源：视觉志</center>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;40条人生经验，可以认真看看&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="文字" scheme="http://www.biueo.com/categories/%E6%96%87%E5%AD%97/"/>
    
    
      <category term="鸡汤" scheme="http://www.biueo.com/tags/%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>python中的os模块</title>
    <link href="http://www.biueo.com/2018/01/21/pythonz%E4%B8%AD%E7%9A%84os%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.biueo.com/2018/01/21/pythonz中的os模块/</id>
    <published>2018-01-21T08:50:48.000Z</published>
    <updated>2019-01-02T15:34:35.824Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div class="description"> Python中os模块简介 </div><a id="more"></a><h2 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h2><p>如果将单个文件和路径上的文件夹名称的字符串传递给它，os.path.join()就会返回一个文件路径的字符串，包含正确的路径分隔符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">'usr'</span>, <span class="string">'bin'</span>, <span class="string">'spam'</span>)</span><br><span class="line"><span class="string">'usr\\bin\\spam</span></span><br></pre></td></tr></table></figure><p>我在Windows上运行这些交互式环境的例子，所以，os.path .join(‘usr’, ‘bin’, ‘spam’)返回’usr\bin\spam’（请注意，倒斜杠有两个，因为每个倒斜杠需要由另一个倒斜杠字符来转义）。如果我在OS X或Linux上调用这个函数，该字符串就会是’usr/bin/spam’。</p><p>如果需要创建文件名称的字符串，os.path.join()函数就很有用。这些字符串将传递给几个文件相关的函数，本章将进行介绍。例如，下面的例子将一个文件名列表中的名称，添加到文件夹名称的末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myFiles = [<span class="string">'accounts.txt'</span>, <span class="string">'details.csv'</span>, <span class="string">'invite.docx'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> filename <span class="keyword">in</span> myFiles:</span><br><span class="line">        print(os.path.join(<span class="string">'C:\\Users\\asweigart'</span>, filename))</span><br><span class="line">C:\Users\asweigart\accounts.txt</span><br><span class="line">C:\Users\asweigart\details.csv</span><br><span class="line">C:\Users\asweigart\invite.docx</span><br></pre></td></tr></table></figure><h2 id="os-getcwd-、os-chdir"><a href="#os-getcwd-、os-chdir" class="headerlink" title="os.getcwd()、os.chdir()"></a>os.getcwd()、os.chdir()</h2><p>利用os.getcwd()函数，可以取得当前工作路径的字符串，并可以利用os.chdir()改变它。在交互式环境中输入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'C:\\Python34'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'C:\\Windows\\System32</span></span><br></pre></td></tr></table></figure><p>如果要更改的当前工作目录不存在，Python就会显示一个错误</p><h2 id="os-makedirs"><a href="#os-makedirs" class="headerlink" title="os.makedirs()"></a>os.makedirs()</h2><p>程序可以用os.makedirs()函数创建新文件夹（目录）。在交互式环境中输入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(<span class="string">'C:\\delicious\\walnut\\waffles'</span>)</span><br></pre></td></tr></table></figure><h2 id="os-path-abspath-、os-path-isabs-path-、os-path-relpath-path-start"><a href="#os-path-abspath-、os-path-isabs-path-、os-path-relpath-path-start" class="headerlink" title="os.path.abspath()、os.path.isabs(path)、os.path.relpath(path,start)"></a>os.path.abspath()、os.path.isabs(path)、os.path.relpath(path,start)</h2><p>调用os.path.abspath(path)将返回参数的绝对路径的字符串。这是将相对路径转换为绝对路径的简便方法。</p><p>调用os.path.isabs(path)，如果参数是一个绝对路径，就返回True，如果参数是一个相对路径，就返回False。</p><p>调用os.path.relpath(path, start)将返回从start路径到path的相对路径的字符串。如果没有提供start，就使用当前工作目录作为开始路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">os.path.abspath(<span class="string">'.'</span>)</span><br><span class="line"><span class="string">'C:\\python34'</span></span><br><span class="line">os.path.abspah(<span class="string">'.scripts'</span>)</span><br><span class="line"><span class="string">'C:\\python34\\scripts'</span></span><br><span class="line">os.path.isabs(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">os.path.isabs(os.path.abspath(<span class="string">'.'</span>))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">os.path.relpath(<span class="string">'C:\\windows'</span>,<span class="string">'C:\\'</span>)</span><br><span class="line"><span class="string">'windows'</span></span><br><span class="line">os.path.relpath(<span class="string">'C:\\windows'</span>,<span class="string">'C:\\spam\\eggs'</span>)</span><br><span class="line"><span class="string">'..\\..\\windows'</span></span><br><span class="line">os.getcwd</span><br><span class="line"><span class="string">'c:\\python34'</span></span><br></pre></td></tr></table></figure><h2 id="os-path-basename-path-、os-path-dirname-path-、os-path-split-、os-path-sep"><a href="#os-path-basename-path-、os-path-dirname-path-、os-path-split-、os-path-sep" class="headerlink" title="os.path.basename(path)、os.path.dirname(path)、os.path.split()、os.path.sep"></a>os.path.basename(path)、os.path.dirname(path)、os.path.split()、os.path.sep</h2><p>调用os.path.basename(path)将返回一个字符串，它包含path 参数中最后一个斜杠之后的所有内容。一个路径的目录名称和基本名称如图8-4所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>path = <span class="string">'C:\\Windows\\System32\\calc.exe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.basename(path)</span><br><span class="line"><span class="string">'calc.exe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.dirname(path)</span><br><span class="line"><span class="string">'C:\\Windows\\System32</span></span><br></pre></td></tr></table></figure><p>如果同时需要一个路径的目录名称和基本名称，就可以调用os.path.split()，获得这两个字符串的元组，像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>calcFilePath = <span class="string">'C:\\Windows\\System32\\calc.exe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(calcFilePath)</span><br><span class="line">(<span class="string">'C:\\Windows\\System32'</span>, <span class="string">'calc.exe'</span>)</span><br></pre></td></tr></table></figure><p>同时也请注意，os.path.split()不会接受一个文件路径并返回每个文件夹的字符串的列表。如果需要这样，请使用split()字符串方法，并根据os.path.sep中的字符串进行分割。回忆一下，根据程序运行的计算机，os.path.sep变量设置为正确的文件夹分割斜杠。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>calcFilePath.split(os.path.sep)</span><br><span class="line">[<span class="string">'C:'</span>, <span class="string">'Windows'</span>, <span class="string">'System32'</span>, <span class="string">'calc.exe'</span>]</span><br></pre></td></tr></table></figure><p>在OS X和Linux系统上，返回的列表头上有一个空字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'/usr/bin'</span>.split(os.path.sep)</span><br><span class="line">[<span class="string">''</span>, <span class="string">'usr'</span>, <span class="string">'bin'</span>]</span><br></pre></td></tr></table></figure><h2 id="os-path-getsize-path-、os-listdir-path"><a href="#os-path-getsize-path-、os-listdir-path" class="headerlink" title="os.path.getsize(path)、os.listdir(path)"></a>os.path.getsize(path)、os.listdir(path)</h2><p>os.path模块提供了一些函数，用于查看文件的字节数以及给定文件夹中的文件和子文件夹。<br>调用os.path.getsize(path)将返回path参数中文件的字节数。<br>调用os.listdir(path)将返回文件名字符串的列表，包含path参数中的每个文件（请注意，这个函数在os模块中，而不是os.path）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="number">776192</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line">[<span class="string">'0409'</span>, <span class="string">'12520437.cpx'</span>, <span class="string">'12520850.cpx'</span>, <span class="string">'5U877.ax'</span>, <span class="string">'aaclient.dll'</span>,</span><br><span class="line">--_snip_--</span><br><span class="line"><span class="string">'xwtpdui.dll'</span>, <span class="string">'xwtpw32.dll'</span>, <span class="string">'zh-CN'</span>, <span class="string">'zh-HK'</span>, <span class="string">'zh-TW'</span>, <span class="string">'zipfldr.dll'</span>]</span><br></pre></td></tr></table></figure><p>如果想知道这个目录下所有文件的总字节数，就可以同时使用os.path.getsize()和os.listdir()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">totalsize=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">'c:\\windows\\systems32'</span>):</span><br><span class="line">    totalsize=totalsize+os.path.getsize(os.path.join(<span class="string">'c:\\windows\\systems32'</span>,filename))</span><br><span class="line"><span class="keyword">print</span> (totalsize)</span><br><span class="line"><span class="number">11178444444</span></span><br></pre></td></tr></table></figure><h2 id="os-path-exists-path-、os-path-isfile-path-、os-path-isdir-path"><a href="#os-path-exists-path-、os-path-isfile-path-、os-path-isdir-path" class="headerlink" title="os.path.exists(path)、os.path.isfile(path)、os.path.isdir(path)"></a>os.path.exists(path)、os.path.isfile(path)、os.path.isdir(path)</h2><p>检查路径的有效性，os.path模块提供了一些函数，用于检验给定的路径是否存在，以及他是文件还是文件夹？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">'C:\\Windows'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">'C:\\some_made_up_folder'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">'C:\\Windows\\System32'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="string">'C:\\Windows\\System32\\calc.exe'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>利用os.path.exists()函数，可以确定DVD或闪存盘当前是否连在计算机上。例如，如果在Windows计算机上，我想用卷名D:\检查一个闪存盘，可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.exists(<span class="string">'D:\\'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>这就是没有插上闪存盘</p><h2 id="open-、read-、readlines-、write"><a href="#open-、read-、readlines-、write" class="headerlink" title="open()、read()、readlines()、write()"></a>open()、read()、readlines()、write()</h2><p>用open()函数打开一个文件，就要向它传递一个字符串路径，表明希望打开的文件。这既可以是绝对路径，也可以是相对路径。open()函数返回一个File对象。<br>调用open()将返回一个File对象。File对象代表计算机中的一个文件，它只是Python中另一种类型的值，就像你已熟悉的列表和字典。在前面的例子中，你将File对象保存在helloFile变量中。现在，当你需要读取或写入该文件，就可以调用helloFile变量中的File对象的方法<br>用File对象的read()方法可以让我们继续使用保存在其中的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloContent = helloFile.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>helloContent</span><br><span class="line"><span class="string">'Hello world!</span></span><br></pre></td></tr></table></figure><p>使用readlines()方法，从该文件取得一个字符串的列表。列表中的每个字符串就是文本中的每一行。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;description&quot;&gt; Python中os模块简介 &lt;/div&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.biueo.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.biueo.com/tags/Python/"/>
    
      <category term="os模块" scheme="http://www.biueo.com/tags/os%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
</feed>
